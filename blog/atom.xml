<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://solidspoon.xyz/blog</id>
    <title>solidSpoon's site Blog</title>
    <updated>2022-06-16T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://solidspoon.xyz/blog"/>
    <subtitle>solidSpoon's site Blog</subtitle>
    <icon>https://solidspoon.xyz/img/logoo.svg</icon>
    <entry>
        <title type="html"><![CDATA[锁库大师]]></title>
        <id>https://solidspoon.xyz/blog/inventory-lock-master</id>
        <link href="https://solidspoon.xyz/blog/inventory-lock-master"/>
        <updated>2022-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[背景]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E8%83%8C%E6%99%AF" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2>
<p>希望在顾客下单时对库存明细表中的商品进行库存锁定，库存明细表简化后如下所示：</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/202206130943348.png" alt="背景" class="img_ev3q"></p>
<p>可见一条产品编码有可能存在多条库存明细，客户的订单大致会锁定几十行的库存，要求如下：</p>
<ul>
<li>尽可能快，并发也高，支持多节点</li>
<li>为了数据的一致性，最好不用 redis 扣减的方案</li>
<li>锁库同时在锁库流水表中插入锁库记录</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="优化方案">优化方案<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88" class="hash-link" aria-label="优化方案的直接链接" title="优化方案的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="分析">分析<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%88%86%E6%9E%90" class="hash-link" aria-label="分析的直接链接" title="分析的直接链接">​</a></h3>
<p>通过分析系统现有的方案，发现锁库操作时间主要浪费在更新库存明细的锁库数量上，为了防止超卖，每一条更新必须加上库存校验（如下所示），一旦失败就要回滚，在加之 MySQL 并没有提供原生批量更新方法，只能每行库存执行一条 SQL，导致锁库时间较长。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="提高锁库速度">提高锁库速度<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%8F%90%E9%AB%98%E9%94%81%E5%BA%93%E9%80%9F%E5%BA%A6" class="hash-link" aria-label="提高锁库速度的直接链接" title="提高锁库速度的直接链接">​</a></h3>
<p>优化的第一步就是想要提高批量锁库的速度，有没有方法能够在 MySQL 中模拟批量更新呢？</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="when-语句">WHEN 语句<a href="https://solidspoon.xyz/blog/inventory-lock-master#when-%E8%AF%AD%E5%8F%A5" class="hash-link" aria-label="WHEN 语句的直接链接" title="WHEN 语句的直接链接">​</a></h4>
<p>答案就是使用 SQL 的 <code>when</code> 语句，在程序中拼接出如下的 SQL</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">UPDATE</span><span class="token plain"> p_stock_instance a  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SET</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">CASE</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b31123'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'025d4574cd934b69993703e7e99e8ca43'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b313'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">END</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">update_date      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">CASE</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b31123'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'025d4574cd934b69993703e7e99e8ca43'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b313'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">ELSE</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">END</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>SQL 执行完毕后会返回更新行数，在程序中判断更新行数是否与预期相符即可判断是否更新成功，程序示意如下：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Integer num = pStockInstanceDao.operationStockSmallData(operationMapping);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (num != operationMapping.size()) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new RuntimeException("操作失败");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这种方法的更新速度很快，在我的测试中，更新两万行库存记录的耗时大约 17 秒。但其实还有更快的方法。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="临时表">临时表<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E4%B8%B4%E6%97%B6%E8%A1%A8" class="hash-link" aria-label="临时表的直接链接" title="临时表的直接链接">​</a></h4>
<p>使用<strong>临时表更新库存</strong>的方法在数据量比较大的情况下比 WHEN 语句的性能好很多，测试条件下更新两万行库存记录耗时大约 1 秒</p>
<p>临时表是 MySQL 中的一种特殊表，他有如下几个特征：</p>
<ul>
<li>临时表是线程内可见，线程之间看不到其他线程创建的临时表</li>
<li>线程推出后临时表就被销毁</li>
<li>临时表与普通表重名时 MySQL 优先选择临时表操作</li>
</ul>
<p>本案例中创建临时表的语句如下：</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">create</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">temporary</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">table</span><span class="token plain"> temp_stock_operation  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stock_instance_id </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unique</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'库存实例ID'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    op_num            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain">                  </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'操作数量'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    success           </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'是否成功'</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>stock_instance_id</code> 就是库存明细表中的 <code>id</code></p>
<p><strong>更新库存时</strong>：</p>
<ol>
<li>创建临时表</li>
<li>先将每一行库存明细要锁定的库存数量插入到临时表中</li>
<li>然后通过 UPDATE JOIN 语句批量更新库存，同时将是否更新成功的信息保存在临时表的 <code>success</code> 字段中</li>
<li>统计 <code>success</code> 字段，判断是否回滚</li>
<li>删除临时表</li>
</ol>
<p>使用的 UPDATE 语句如下：</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">update</span><span class="token plain"> temp_stock_operation o </span><span class="token keyword" style="color:#00009f">inner</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> p_stock_instance s  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_instance_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>检查是否成功，该语句返回值为 0 或 1 。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> success  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> temp_stock_operation  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>最后删除临时表：</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">drop</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">temporary</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">table</span><span class="token plain"> temp_stock_operation</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="将二者结合">将二者结合<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%B0%86%E4%BA%8C%E8%80%85%E7%BB%93%E5%90%88" class="hash-link" aria-label="将二者结合的直接链接" title="将二者结合的直接链接">​</a></h4>
<p>虽然使用临时表的方案更新大量数据时很快，但是如果使用这个方法来更新几十条库存时就会发现速度又变慢了，在我的测试中，更新三四十条的耗时几乎与更新两万条相等。</p>
<p>就是说这条更新语句在数量少的时候性能会下降</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">update</span><span class="token plain"> temp_stock_operation o </span><span class="token keyword" style="color:#00009f">inner</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> p_stock_instance s  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_instance_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>分析它的执行计划，发现当更新行数小于 45 时，JOIN 操作便不会走索引，而是全表扫描，导致性能下降。这时候即使使用下面的 SQL 语句强制索引也是<strong>没用的</strong>。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">update</span><span class="token plain"> temp_stock_operation o </span><span class="token keyword" style="color:#00009f">force</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">index</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stock_instance_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">inner</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> p_stock_instance s  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_instance_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>所以我们要将这两种方法结合，来获得最佳的性能</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if (operationMapping.size() &lt; 45) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // WHEN 语句方案</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Integer num = pStockInstanceDao.operationStockSmallData(operationMapping);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (num != operationMapping.size()) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throw new RuntimeException("操作失败");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} else {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 临时表方案</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Boolean success = pStockInstanceDao.operationStockBigData(operationMapping);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (!success) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throw new RuntimeException("操作失败");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="提高并发量">提高并发量<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%8F%90%E9%AB%98%E5%B9%B6%E5%8F%91%E9%87%8F" class="hash-link" aria-label="提高并发量的直接链接" title="提高并发量的直接链接">​</a></h3>
<p>由于并发时多个线程间存在竞态条件，可能导致库存扣减失败，而前面说到库存明细表中一件商品可能对应多条库存明细，就是说如果并发导致有一条库存明细扣减失败的话很可能这个商品在其他的库存明细中还有库存。而且由于无论更没更新成功，线程都会占有数据库行的写锁，这就要求我们更新失败时最好能够快速释放锁，这又会导致接口会误报库存不足。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="商品编码锁">商品编码锁<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%95%86%E5%93%81%E7%BC%96%E7%A0%81%E9%94%81" class="hash-link" aria-label="商品编码锁的直接链接" title="商品编码锁的直接链接">​</a></h4>
<p>一个解决办法如下</p>
<ol>
<li>线程在执行库存数量查询前为订单中的每个商品编码获取一个分布式锁，只有获得全部商品编码的锁时才进行库存的查询操作</li>
<li>线程在更新完库存后释放所持有的商品编码锁</li>
</ol>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RLock[] locks = productSids.seream()  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .distinct()  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .map(key -&gt; "ced:pStockInstance:" + key)  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .sorted()  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .map(key -&gt; redissonClient.getLock(key))  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .toArray(RLock[]::new);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RLock skuLock = redissonClient.getMultiLock(locks);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 加锁</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">skuLock.lock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 解锁</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">skuLock.unlockAsync();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这种方法当所有的订单都锁定同一个商品时就会导致程序退化成串行执行，效率很慢。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="和并请求">和并请求<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%92%8C%E5%B9%B6%E8%AF%B7%E6%B1%82" class="hash-link" aria-label="和并请求的直接链接" title="和并请求的直接链接">​</a></h4>
<p>由于前文我们已经将库存更新的方法优化的足够快，因此想高效地解决竞态条件的问题，可以将各个请求的参数在应用程序中合并在一起，然后使用一个线程批量扣减，从而避免线程间扣减冲突。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/202206130944601.png" alt="合并请求" class="img_ev3q"></p>
<p>使线程阻塞并被唤醒的关键代码如下</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class GuardedObject&lt;T, K&gt; {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //受保护的对象  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    T obj;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final Lock lock = new ReentrantLock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final Condition done = lock.newCondition();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final int timeout = 60;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //保存所有GuardedObject  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final static Map&lt;Object, GuardedObject&gt; gos = new ConcurrentHashMap&lt;&gt;();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public GuardedObject(K key) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.key = key;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    K key;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 1. 被请求线程通过唯一 key 获得阻塞对象，然后将 key 存入消息，发送到扣减中心  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static &lt;K&gt; GuardedObject create(K key) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        GuardedObject go = new GuardedObject(key.toString());  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        gos.put(key, go);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return go;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 2. 被请求线程稍后调用阻塞对象的该方法，阻塞，等待被唤醒</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Optional&lt;T&gt; get(Predicate&lt;T&gt; p) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lock.lock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Long start = System.currentTimeMillis();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            while (!p.test(obj)) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                done.await(timeout, TimeUnit.SECONDS);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (System.currentTimeMillis() - start &gt;= timeout * 1000) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    gos.remove(key);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    break;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return Optional.ofNullable(obj);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (InterruptedException e) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new RuntimeException(e);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lock.unlock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 3. 结果监听器根据结果消息中的 key 找到对应阻塞对象，传入结果并唤醒对应线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static &lt;K, T&gt; void fireEvent(K key, T obj) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        GuardedObject go = gos.remove(key);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (go != null) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            go.onChanged(obj);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //事件通知方法  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void onChanged(T obj) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lock.lock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.obj = obj;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            done.signalAll();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lock.unlock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="性能测试">性能测试<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="性能测试的直接链接" title="性能测试的直接链接">​</a></h2>
<p>实验环境为了获得最坏情况下的性能，在库存明细中存入了两万五千条同一商品，并将每一条的数据的库存数量设置为 1</p>
<p>在我的电脑中启动两个服务接收请求，启动若干线程对该商品进行扣减，结果如下</p>
<table><thead><tr><th>请求线程数量</th><th>总计锁库行数</th><th>全部处理耗时</th></tr></thead><tbody><tr><td>100</td><td>1000</td><td>1 S</td></tr><tr><td>500</td><td>5000</td><td>3 S</td></tr><tr><td>1000</td><td>10000</td><td>4 S</td></tr><tr><td>2000</td><td>20000</td><td>8 S</td></tr><tr><td>3000</td><td>25000</td><td>12 S</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="注意事项">注意事项<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="注意事项的直接链接" title="注意事项的直接链接">​</a></h2>
<p>以下是我在编写代码时发现的一些需要注意的点：</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="唯一索引">唯一索引<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95" class="hash-link" aria-label="唯一索引的直接链接" title="唯一索引的直接链接">​</a></h3>
<p>在创建临时表时 <code>stock_instance_id</code> 要创建唯一索引，因为这个字段要充当 JOIN 语句的条件，实测不加唯一索引性能会很差。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">create</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">temporary</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">table</span><span class="token plain"> temp_stock_operation  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stock_instance_id </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unique</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'库存实例ID'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="加快消息队列读取">加快消息队列读取<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%8A%A0%E5%BF%AB%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%AF%BB%E5%8F%96" class="hash-link" aria-label="加快消息队列读取的直接链接" title="加快消息队列读取的直接链接">​</a></h3>
<p>扣减中心的库存扣减线程直接从消息队列读取消息效率较低，在本案例中，可以新建一个本地队列，用其他线程将消息队列中的消息搬运到本地队列，让扣减线程操作本地队列而不是消息队列，这样可以大幅提高扣减效率。</p>
<hr>
<p>源码请见：<a href="https://github.com/solidSpoon/inventory-lock-master" target="_blank" rel="noopener noreferrer">https://github.com/solidSpoon/inventory-lock-master</a></p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring 事务传播特性]]></title>
        <id>https://solidspoon.xyz/blog/spring-transaction-propagation-characteristics</id>
        <link href="https://solidspoon.xyz/blog/spring-transaction-propagation-characteristics"/>
        <updated>2022-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[问题]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题">问题<a href="https://solidspoon.xyz/blog/spring-transaction-propagation-characteristics#%E9%97%AE%E9%A2%98" class="hash-link" aria-label="问题的直接链接" title="问题的直接链接">​</a></h2>
<p>在项目中写出了如下模式的代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void parent() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 期望：parent() 不回滚</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    balabalaService.child();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void child() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        balabalaService.grandChild();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } catch (Exception ignore) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 忽略异常  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void grandChild() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 通过抛出异常回滚当前事务  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new RuntimeException("grandChild");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>上面的代码在 <code>parent()</code> 方法中通过 <code>child()</code> 调用了 <code>grandChild()</code> ，期望 <code>grandChild()</code> 回滚时 <code>parent()</code> 不会回滚。</p>
<p>这段代码实际上是不会按照预期工作的，<code>parent()</code> 方法也会跟着回滚。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="解释">解释<a href="https://solidspoon.xyz/blog/spring-transaction-propagation-characteristics#%E8%A7%A3%E9%87%8A" class="hash-link" aria-label="解释的直接链接" title="解释的直接链接">​</a></h2>
<p>当 <code>grandChild()</code> 抛出异常时，会将当前事务标记为回滚，虽然 <code>child()</code> 中捕获了异常，看似 <code>parent()</code> 不会因为异常而回滚，但由于事务的传播特性，现在 <code>grandChild()</code> 与 <code>parent()</code> 处于一个事务中，因此实际上是 <code>parent()</code> 的事务被 <code>grandChild()</code> 标记为了回滚，导致 <code>parent()</code> 发生回滚。</p>
<h1>解决</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nested">NESTED<a href="https://solidspoon.xyz/blog/spring-transaction-propagation-characteristics#nested" class="hash-link" aria-label="NESTED的直接链接" title="NESTED的直接链接">​</a></h2>
<p>既然 <code>parent()</code> 和 <code>grandChild()</code> 两个方法处在一个事务中，我就想能不能在 <code>child()</code> 方法上新建一个嵌套事务，这样 <code>grandChild()</code> 便与 <code>child()</code> 处于同一个事物，因此 <code>grandChild()</code> 回滚时就不会导致 <code>parent()</code> 回滚。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void parent() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 期望：parent() 不回滚</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    balabalaService.child();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 开启嵌套事务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional(propagation = Propagation.NESTED)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void child() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        balabalaService.grandChild();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } catch (Exception ignore) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 忽略异常  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void grandChild() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 通过抛出异常回滚当前事务  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new RuntimeException("grandChild");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这段代码看起来没啥问题，<code>grandChild()</code> 与  <code>child()</code> 处于同一个嵌套事务中，嵌套事务的回滚不会影响外层事务的回滚，同时又在 <code>child()</code> 捕获了所有的异常，因此外部事物也不会因为接收到异常而回滚，然而事实也不是这样的。</p>
<p><code>grandChild()</code> 方法的事务传播特性为默认值 <code>REQUIRED</code> ，他的特性之一是「支持当前事务」，那么当前事务是什么呢？</p>
<p>通过[[Spring Boot 打印事务日志]]等方式发现当前事务是 <code>parent()</code> 方法的事务，也就是说 <code>Propagation.NESTED</code> 方式创建的事务不是真正的事务，实际上他只是 MySQL 中的一个「savepoint」，导致 <code>grandChild()</code> 仍然与  <code>child()</code> 处在同一个事物中。</p>
<blockquote>
<p>The SAVEPOINT in MySQL is used for dividing (or) breaking a transaction into multiple units so that the user has a chance of roll backing the transaction up to a specified point. That means using Save Point we can roll back a part of a transaction instead of the entire transaction.</p>
</blockquote>
<p>可见：<strong>NESTED 中调用带事务的方法可能导致外层事务回滚</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="requires_new">REQUIRES_NEW<a href="https://solidspoon.xyz/blog/spring-transaction-propagation-characteristics#requires_new" class="hash-link" aria-label="REQUIRES_NEW的直接链接" title="REQUIRES_NEW的直接链接">​</a></h2>
<p>解决办法就是使用 <code>Propagation.REQUIRES_NEW</code> 创建一个真正的事务。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void parent() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 期望：parent() 不回滚</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    balabalaService.child();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 开启嵌套事务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional(propagation = Propagation.Propagation.REQUIRES_NEW)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void child() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        balabalaService.grandChild();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } catch (Exception ignore) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 忽略异常  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void grandChild() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 通过抛出异常回滚当前事务  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new RuntimeException("grandChild");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这种情况下，Spring 会暂停当前的事务链接，使用一个新的链接启动一个新的事务，也就是说 <code>REQUIRES_NEW</code> 的事务跟普通的事务是完全一样的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="catch-exception">Catch Exception<a href="https://solidspoon.xyz/blog/spring-transaction-propagation-characteristics#catch-exception" class="hash-link" aria-label="Catch Exception的直接链接" title="Catch Exception的直接链接">​</a></h2>
<p>此时再运行代码，会发现 <code>child()</code> 方法抛出了一个异常，描述为「Transaction rolled back because it has been marked as rollback-only」，很明显我们已经在 <code>child()</code> 中捕获了所有的异常，那这个异常就不是我们抛出的。由此得知，当事务被标记为 rollback-only 的时候，Spring 会在事务的方法上抛出一个异常。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void parent() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 期望：parent() 不回滚</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        balabalaService.child();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } catch (Exception e) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        e.printStackTrace();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 开启嵌套事务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional(propagation = Propagation.Propagation.REQUIRES_NEW)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void child() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        balabalaService.grandChild();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } catch (Exception ignore) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 忽略异常  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Override  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Transactional  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public void grandChild() {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 通过抛出异常回滚当前事务  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new RuntimeException("grandChild");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在 <code>parent()</code> 方法中捕获异常后，这段代码终于工作了。</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MongoDB 初探]]></title>
        <id>https://solidspoon.xyz/blog/exploring-mongodb</id>
        <link href="https://solidspoon.xyz/blog/exploring-mongodb"/>
        <updated>2022-04-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[对于已经熟悉 MySQL 的同学来说，初次接触 MongoDB 可能会不习惯它的语法，本篇文章将通过一个简单的示例带你入门 MongoDB。]]></summary>
        <content type="html"><![CDATA[<p>对于已经熟悉 MySQL 的同学来说，初次接触 MongoDB 可能会不习惯它的语法，本篇文章将通过一个简单的示例带你入门 MongoDB。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="准备">准备<a href="https://solidspoon.xyz/blog/exploring-mongodb#%E5%87%86%E5%A4%87" class="hash-link" aria-label="准备的直接链接" title="准备的直接链接">​</a></h2>
<p>对于 MongoDB 新手，可以借助 DataGrip 来学习MongoDB 语法。在 MongoDB 中实现准备好两个表 "old" 和 "new"，并随意插入一些数据</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">db</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">createCollection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"new"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">db</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">createCollection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"old"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">db</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">old</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">insertOne</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token literal-property property" style="color:#36acaa">name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> old  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">db</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">new</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">insertOne</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token literal-property property" style="color:#36acaa">name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">13</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token literal-property property" style="color:#36acaa">goods</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 随意插入数据</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在 DataGrip 中输入如下的 SQL 语句</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"new"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> aleft </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"old"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> bright </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> aleft</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> bright</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>然后在这条语句上「右键」，选择 「Show JS Script」，会发现 DataGrip 会帮助我们将 SQL 语句转为 MongoDB 语句，接下来我们通过研究这个语句来体会 MongoDB 的基本思想</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">db</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getSiblingDB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getCollection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"new"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">aggregate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">$project</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string-property property" style="color:#36acaa">"aleft"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"$$ROOT"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-property property" style="color:#36acaa">"_id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">$lookup</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">localField</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"aleft.id"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword module" style="color:#00009f">from</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"old"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">foreignField</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"id"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword module" style="color:#00009f">as</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"bright"</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">$unwind</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">path</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"$bright"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">preserveNullAndEmptyArrays</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">$replaceRoot</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">newRoot</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">$mergeObjects</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"$aleft"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"$bright"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"$$ROOT"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">$project</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string-property property" style="color:#36acaa">"aleft"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-property property" style="color:#36acaa">"bright"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="分析">分析<a href="https://solidspoon.xyz/blog/exploring-mongodb#%E5%88%86%E6%9E%90" class="hash-link" aria-label="分析的直接链接" title="分析的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="aggregate">aggregate<a href="https://solidspoon.xyz/blog/exploring-mongodb#aggregate" class="hash-link" aria-label="aggregate的直接链接" title="aggregate的直接链接">​</a></h3>
<p><code>db.collection.aggregate(管道，选项)</code> 方法参数接收一个包含了若干操作的数组，类似于 Linux 中的管道一样，对集合依次进行操作。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="project">project<a href="https://solidspoon.xyz/blog/exploring-mongodb#project" class="hash-link" aria-label="project的直接链接" title="project的��直接链接">​</a></h3>
<p>第一个操作为 <code>$project</code> ，这是一个映射操作</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $project: {"aleft": "$$ROOT", "_id": 0}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>其中 <code>$$ROOT</code> 即引用顶级文档，效果是将当前文档（行）的所有数据放到 <code>aleft</code> 字段下。<code>"_id": 0</code> 代表隐藏 <code>_id</code> 行，当设定为 <code>"_id": 1</code> 时会展示 <code>_id</code> 行，（<code>_id</code> 由 MongoDB 自动生成）结果示意如下：</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 12  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "_id": {"$oid": "624ce445b67f62529d94a83e"}, // 当 _id: 1 时会展示 id </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "624ce445b67f62529d94a83e"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 2,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 13,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "goods": 1  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lookup">lookup<a href="https://solidspoon.xyz/blog/exploring-mongodb#lookup" class="hash-link" aria-label="lookup的直接链接" title="lookup的直接链接">​</a></h3>
<p>第二个操作为</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $lookup: {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      localField: "aleft.id",  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      from: "old",  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      foreignField: "id",  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      as: "bright" </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>顾名思义，这是一个查找操作，它根据第一步结果中的 <code>aleft.id</code> 字段，在 <code>old</code> 表中查找 <code>id</code> 与之相等的文档（行），并将所有匹配的结果以数组方式放在 <code>bright</code> 字段下，结果示意如下：</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 12  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bright": [  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "_id": {"$oid": "624ce82ab67f62529d94a84c"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "_id": {"$oid": "624ce867b67f62529d94a84e"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "vbsss": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ]  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unwind">unwind<a href="https://solidspoon.xyz/blog/exploring-mongodb#unwind" class="hash-link" aria-label="unwind的直接链接" title="unwind的直接链接">​</a></h3>
<p>第三个操作为</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $unwind: {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      path: "$bright",  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      preserveNullAndEmptyArrays: true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  } </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这个操作指明了使用 <code>$bright</code> 字段，这个字段是一个数组，<code>$unwind</code> 操作会将 <code>$bright</code> 中的每一个元素与 <code>aleft</code> 组合</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 12  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bright": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "624ce82ab67f62529d94a84c"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 12  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bright": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "624ce867b67f62529d94a84e"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "vbsss": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>至此，我们已经将两个表中关联的行组合在了一起，接下来需要将这个结构简化一下</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="replaceroot">replaceRoot<a href="https://solidspoon.xyz/blog/exploring-mongodb#replaceroot" class="hash-link" aria-label="replaceRoot的直接链接" title="replaceRoot的直接链接">​</a></h3>
<p>第四个操作为</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $replaceRoot: {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      newRoot: {$mergeObjects: ["$aleft", "$bright", "$$ROOT"]}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mergeobjects">mergeObjects<a href="https://solidspoon.xyz/blog/exploring-mongodb#mergeobjects" class="hash-link" aria-label="mergeObjects的直接链接" title="mergeObjects的直接链接">​</a></h3>
<p><code>$mergeObjects</code> 操作会将参数中元素的内容进行合并，如果有重复，后面的值会覆盖前面的值，比如下面的这个文档</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 12  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bright": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "624ce82ab67f62529d94a84c"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>执行 <code>$mergeObjects: ["$aleft", "$bright", "$$ROOT"]</code> 操作后结果如下</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 12  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bright": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "624ce82ab67f62529d94a84c"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="replaceroot-1">replaceRoot<a href="https://solidspoon.xyz/blog/exploring-mongodb#replaceroot-1" class="hash-link" aria-label="replaceRoot的直接链接" title="replaceRoot的直接链接">​</a></h3>
<p><code>$replaceRoot</code> 将指定的文档提升到顶层，并丢弃顶层所有其他字段。</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "aleft": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": 12  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bright": {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "_id": {"$oid": "624ce82ab67f62529d94a84c"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>至此，只要将 <code>aleft</code> 和 <code>bright</code> 两个参数删掉就得到了最后的结果，操作为</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $project: {"aleft": 0, "bright": 0}  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>结果示意如下</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "_id": {"$oid": "6247f1e253a1be11c3b88d8b"},  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "id": 1,  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "name": "haha"  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="https://solidspoon.xyz/blog/exploring-mongodb#%E5%85%B6%E4%BB%96" class="hash-link" aria-label="其他的直接链接" title="其他的直接链接">​</a></h2>
<p>MongoDB 中的 JOIN 操作还是十分复杂的，与 MySQL 不同， MongoDB 中的文档结构并没有限制，所以可以采用<a href="https://www.mongodb.com/docs/v4.2/tutorial/query-embedded-documents/" target="_blank" rel="noopener noreferrer">嵌套文档</a>的方式将本来需要关联的数据保存在一起，从而避免 JOIN 操作</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="MongoDB" term="MongoDB"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Distributed locks with Redis]]></title>
        <id>https://solidspoon.xyz/blog/distributed-locks-with-redis</id>
        <link href="https://solidspoon.xyz/blog/distributed-locks-with-redis"/>
        <updated>2022-03-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[原文链接：https://redis.io/topics/distlock]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="https://redis.io/topics/distlock" target="_blank" rel="noopener noreferrer">https://redis.io/topics/distlock</a></p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="background">Background<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#background" class="hash-link" aria-label="Background的直接链接" title="Background的直接链接">​</a></h2>
<p>Distributed locks are a very useful primitive in many environments where different processes must operate with shared resources in a mutually exclusive way.</p>
<p>分布式锁在许多环境中是非常有用的原语，在这些环境中不同的进程必须以互斥的方式使用共享资源。</p>
<p>There are a number of libraries and blog posts describing how to implement a DLM (Distributed Lock Manager) with Redis, but every library uses a different approach, and many use a simple approach with lower guarantees compared to what can be achieved with slightly more complex designs.</p>
<p>有许多库和博客文章描述了如何使用 Redis 实现 DLM（分布式锁管理器），但是每个库都使用不同的方法，并且与稍微复杂一点的库相比，许多库使用的保证较低的简单方法设计。</p>
<p>This page is an attempt to provide a more canonical algorithm to implement distributed locks with Redis. We propose an algorithm, called <strong>Redlock</strong>, which implements a DLM which we believe to be safer than the vanilla single instance approach. We hope that the community will analyze it, provide feedback, and use it as a starting point for the implementations or more complex or alternative designs.</p>
<p>本页试图提供一种更规范的算法来使用 Redis 实现分布式锁。我们提出了一种称为 <strong>Redlock</strong> 的算法，它实现了一个我们认为比普通单实例方法更安全的 DLM。我们希望社区能够对其进行分析，提供反馈，并将其用作实施或更复杂或替代设计的起点。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementations">Implementations<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#implementations" class="hash-link" aria-label="Implementations的直接链接" title="Implementations的直接链接">​</a></h2>
<p>Before describing the algorithm, here are a few links to implementations already available that can be used for reference.</p>
<p>在描述算法之前，这里有一些已经可用的实现链接，可供参考。</p>
<ul>
<li><a href="https://github.com/antirez/redlock-rb" target="_blank" rel="noopener noreferrer">Redlock-rb</a> (Ruby implementation). There is also a <a href="https://github.com/leandromoreira/redlock-rb" target="_blank" rel="noopener noreferrer">fork of Redlock-rb</a> that adds a gem for easy distribution and perhaps more.</li>
<li><a href="https://github.com/SPSCommerce/redlock-py" target="_blank" rel="noopener noreferrer">Redlock-py</a> (Python implementation).</li>
<li><a href="https://github.com/brainix/pottery#redlock" target="_blank" rel="noopener noreferrer">Pottery</a> (Python implementation).</li>
<li><a href="https://github.com/joanvila/aioredlock" target="_blank" rel="noopener noreferrer">Aioredlock</a> (Asyncio Python implementation).</li>
<li><a href="https://github.com/ronnylt/redlock-php" target="_blank" rel="noopener noreferrer">Redlock-php</a> (PHP implementation).</li>
<li><a href="https://github.com/malkusch/lock#phpredismutex" target="_blank" rel="noopener noreferrer">PHPRedisMutex</a> (further PHP implementation)</li>
<li><a href="https://github.com/cheprasov/php-redis-lock" target="_blank" rel="noopener noreferrer">cheprasov/php-redis-lock</a> (PHP library for locks)</li>
<li><a href="https://github.com/rtckit/reactphp-redlock" target="_blank" rel="noopener noreferrer">rtckit/react-redlock</a> (Async PHP implementation)</li>
<li><a href="https://github.com/go-redsync/redsync" target="_blank" rel="noopener noreferrer">Redsync</a> (Go implementation).</li>
<li><a href="https://github.com/mrniko/redisson" target="_blank" rel="noopener noreferrer">Redisson</a> (Java implementation).</li>
<li><a href="https://github.com/sbertrang/redis-distlock" target="_blank" rel="noopener noreferrer">Redis::DistLock</a> (Perl implementation).</li>
<li><a href="https://github.com/jacket-code/redlock-cpp" target="_blank" rel="noopener noreferrer">Redlock-cpp</a> (C++ implementation).</li>
<li><a href="https://github.com/kidfashion/redlock-cs" target="_blank" rel="noopener noreferrer">Redlock-cs</a> (C#/.NET implementation).</li>
<li><a href="https://github.com/samcook/RedLock.net" target="_blank" rel="noopener noreferrer">RedLock.net</a> (C#/.NET implementation). Includes async and lock extension support.</li>
<li><a href="https://github.com/psibernetic/scarletlock" target="_blank" rel="noopener noreferrer">ScarletLock</a> (C# .NET implementation with configurable datastore)</li>
<li><a href="https://github.com/LiZhenNet/Redlock4Net" target="_blank" rel="noopener noreferrer">Redlock4Net</a> (C# .NET implementation)</li>
<li><a href="https://github.com/mike-marcacci/node-redlock" target="_blank" rel="noopener noreferrer">node-redlock</a> (NodeJS implementation). Includes support for lock extension.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="safety-and-liveness-guarantees">Safety and Liveness guarantees<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#safety-and-liveness-guarantees" class="hash-link" aria-label="Safety and Liveness guarantees的直接链接" title="Safety and Liveness guarantees的直接链接">​</a></h2>
<p>We are going to model our design with just three properties that, from our point of view, are the minimum guarantees needed to use distributed locks in an effective way.</p>
<p>我们将仅使用三个属性对我们的设计进行建模，从我们的角度来看，这些属性是有效使用分布式锁所需的最低保证。</p>
<ol>
<li>
<p>Safety property: Mutual exclusion. At any given moment, only one client can hold a lock.</p>
</li>
<li>
<p>Liveness property A: Deadlock free. Eventually it is always possible to acquire a lock, even if the client that locked a resource crashes or gets partitioned.</p>
</li>
<li>
<p>Liveness property B: Fault tolerance. As long as the majority of Redis nodes are up, clients are able to acquire and release locks.</p>
</li>
<li>
<p>安全性：互斥。在任何给定时刻，只有一个客户端可以持有锁。</p>
</li>
<li>
<p>Liveness property A: 无死锁。最终，即使锁定资源的客户端崩溃或被分区，也总是可以获得锁。</p>
</li>
<li>
<p>Liveness property B: 容错。只要大多数 Redis 节点都启动，客户端就可以获取和释放锁。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-failover-based-implementations-are-not-enough">Why failover-based implementations are not enough<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#why-failover-based-implementations-are-not-enough" class="hash-link" aria-label="Why failover-based implementations are not enough的直接链接" title="Why failover-based implementations are not enough的直接��链接">​</a></h2>
<p>To understand what we want to improve, let’s analyze the current state of affairs with most Redis-based distributed lock libraries.</p>
<p>为了了解我们想要改进的地方，让我们分析一下大多数基于 Redis 的分布式锁库的现状。</p>
<p>The simplest way to use Redis to lock a resource is to create a key in an instance. The key is usually created with a limited <strong>time to live</strong>, using the Redis expires feature, so that eventually it will get released (property 2 in our list). When the client needs to release the resource, it deletes the key.</p>
<p>使用 Redis 锁定资源的最简单方法是在实例中创建 key。key 通常是使用 Redis 过期功能在有限的时间内创建的，因此最终它会被释放（我们列表中的属性 2）。当客户端需要释放资源时，它会删除 key。</p>
<p>Superficially this works well, but there is a problem: this is a single point of failure in our architecture. What happens if the Redis master goes down? Well, let’s add a replica! And use it if the master is unavailable. This is unfortunately not viable. By doing so we can’t implement our safety property of mutual exclusion, because Redis replication is asynchronous.</p>
<p>从表面上看，这很好用，但有一个问题：这是我们架构中的单点故障。如果 Redis master 宕机了怎么办？好吧，让我们添加一个副本！如果 master 不可用，请使用它。不幸的是，这是不可行的。这样做我们无法实现互斥的安全属性，因为 Redis 复制是异步的。</p>
<p>There is an obvious race condition with this model:</p>
<p>这个模型有一个明显的竞争条件：</p>
<ol>
<li>
<p>Client A acquires the lock in the master.</p>
</li>
<li>
<p>The master crashes before the write to the key is transmitted to the replica.</p>
</li>
<li>
<p>The replica gets promoted to master.</p>
</li>
<li>
<p>Client B acquires the lock to the same resource A already holds a lock for. <strong>SAFETY VIOLATION!</strong></p>
</li>
<li>
<p>客户端 A 获取 master 中的锁。</p>
</li>
<li>
<p>master 在对 key 的写入传输到 replica 之前崩溃。</p>
</li>
<li>
<p>replica 被提升为 master。</p>
</li>
<li>
<p>客户端 B 获取 A 已经持有锁的同一资源的锁。 <strong>违反安全规定！</strong></p>
</li>
</ol>
<p>Sometimes it is perfectly fine that under special circumstances, like during a failure, multiple clients can hold the lock at the same time. If this is the case, you can use your replication based solution. Otherwise we suggest to implement the solution described in this document.</p>
<p>有时在特殊情况下（例如在故障期间），多个客户端可以同时持有锁是完全可以的。如果是这种情况，您可以使用基于复制的解决方案。否则，我们建议实施本文档中描述的解决方案。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="correct-implementation-with-a-single-instance">Correct implementation with a single instance<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#correct-implementation-with-a-single-instance" class="hash-link" aria-label="Correct implementation with a single instance的直接链接" title="Correct implementation with a single instance的直接链接">​</a></h2>
<p>Before trying to overcome the limitation of the single instance setup described above, let’s check how to do it correctly in this simple case, since this is actually a viable solution in applications where a race condition from time to time is acceptable, and because locking into a single instance is the foundation we’ll use for the distributed algorithm described here.</p>
<p>在尝试克服上述单实例设置的限制之前，让我们检查一下如何在这个简单的情况下正确地做到这一点，因为在不时出现竞争条件的应用程序中，这实际上是一个可行的解决方案，并且因为锁定到单个实例是我们将用于此处描述的分布式算法的基础。</p>
<p>To acquire the lock, the way to go is the following:</p>
<p>获取锁的方法如下：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SET resource_name my_random_value NX PX 30000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The command will set the key only if it does not already exist (NX option), with an expire of 30000 milliseconds (PX option). The key is set to a value “<code>my_random_value</code>”. This value must be unique across all clients and all lock requests.</p>
<p>该命令仅在密钥不存在时设置密钥（NX option），过期时间为 30000 毫秒（PX option）。密钥设置为值<code>my_random_value</code>。此值在所有客户端和所有锁定请求中必须是唯一的。</p>
<p>Basically the random value is used in order to release the lock in a safe way, with a script that tells Redis: remove the key only if it exists and the value stored at the key is exactly the one I expect to be. This is accomplished by the following Lua script:</p>
<p>基本上，随机值用于以安全的方式释放锁，脚本告诉 Redis：仅当密钥存在并且存储在密钥中的值正是我期望的值时才删除密钥。这是通过以下 Lua 脚本完成的：</p>
<div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if redis.call("get",KEYS[1]) == ARGV[1] then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return redis.call("del",KEYS[1])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is important in order to avoid removing a lock that was created by another client. For example a client may acquire the lock, get blocked in some operation for longer than the lock validity time (the time at which the key will expire), and later remove the lock, that was already acquired by some other client. Using just DEL is not safe as a client may remove the lock of another client. With the above script instead every lock is “signed” with a random string, so the lock will be removed only if it is still the one that was set by the client trying to remove it.</p>
<p>这对于避免删除由另一个客户端创建的锁很重要。例如，一个客户端可能获取了锁，在某个操作中被阻塞的时间超过了锁的有效时间（密钥过期的时间），然后移除了已经被其他客户端获取的锁。仅使用 DEL 是不安全的，因为客户端可能会删除另一个客户端的锁定。使用上面的脚本，每个锁都用一个随机字符串“签名”，所以只有当它仍然是客户端试图移除它时设置的锁才会被移除。</p>
<p>What should this random string be? I assume it’s 20 bytes from /dev/urandom, but you can find cheaper ways to make it unique enough for your tasks. For example a safe pick is to seed RC4 with /dev/urandom, and generate a pseudo random stream from that. A simpler solution is to use a combination of unix time with microseconds resolution, concatenating it with a client ID, it is not as safe, but probably up to the task in most environments.</p>
<p>这个随机字符串应该是什么？我假设它是 /dev/urandom 中的 20 个字节，但您可以找到更便宜的方法来使其对您的任务足够独特。例如，一个安全的选择是使用 /dev/urandom 作为 RC4 的种子，并从中生成一个伪随机流。一个更简单的解决方案是使用 unix 时间与微秒分辨率的组合，将其与客户端 ID 连接起来，它不是那么安全，但可能在大多数环境中都可以胜任。</p>
<p>The time we use as the key <strong>time to live</strong>, is called the “lock validity time”. It is both the auto release time, and the time the client has in order to perform the operation required before another client may be able to acquire the lock again, without technically violating the mutual exclusion guarantee, which is only limited to a given window of time from the moment the lock is acquired.</p>
<p>key 的过期时间，称为「锁有效时间」。它既是自动释放时间，也是客户端在另一个客户端可能能够再次获取锁之前执行所需操作的时间，而不会在技术上违反互斥保证，互斥保证仅限于从获得锁的那一刻起的给定时间窗口</p>
<p>So now we have a good way to acquire and release the lock. The system, reasoning about a non-distributed system composed of a single, always available, instance, is safe. Let’s extend the concept to a distributed system where we don’t have such guarantees.</p>
<p>所以现在我们有了一个获取和释放锁的好方法。该系统推理由一个始终可用的单个实例组成的非分布式系统是安全的。让我们将这个概念扩展到没有此类保证的分布式系统。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-redlock-algorithm">The Redlock algorithm<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#the-redlock-algorithm" class="hash-link" aria-label="The Redlock algorithm的直接链接" title="The Redlock algorithm的直接链接">​</a></h2>
<p>In the distributed version of the algorithm we assume we have N Redis masters. Those nodes are totally independent, so we don’t use replication or any other implicit coordination system. We already described how to acquire and release the lock safely in a single instance. We take for granted that the algorithm will use this method to acquire and release the lock in a single instance. In our examples we set N=5, which is a reasonable value, so we need to run 5 Redis masters on different computers or virtual machines in order to ensure that they’ll fail in a mostly independent way.</p>
<p>在算法的分布式版本中，我们假设我们有 N 个 Redis master。这些节点是完全独立的，所以我们不使用复制或任何其他隐式协调系统。我们已经描述了如何在单个实例中安全地获取和释放锁。我们理所当然地认为算法会使用这种方法在单个实例中获取和释放锁。在我们的示例中，我们设置 N=5，这是一个合理的值，因此我们需要在不同的计算机或虚拟机上运行 5 个 Redis 主服务器，以确保它们以几乎独立的方式发生故障。</p>
<p>In order to acquire the lock, the client performs the following operations:</p>
<p>为了获取锁，客户端执行以下操作：</p>
<ol>
<li>
<p>It gets the current time in milliseconds.</p>
</li>
<li>
<p>It tries to acquire the lock in all the N instances sequentially, using the same key name and random value in all the instances. During step 2, when setting the lock in each instance, the client uses a timeout which is small compared to the total lock auto-release time in order to acquire it. For example if the auto-release time is 10 seconds, the timeout could be in the ~ 5-50 milliseconds range. This prevents the client from remaining blocked for a long time trying to talk with a Redis node which is down: if an instance is not available, we should try to talk with the next instance ASAP.</p>
</li>
<li>
<p>The client computes how much time elapsed in order to acquire the lock, by subtracting from the current time the timestamp obtained in step 1. If and only if the client was able to acquire the lock in the majority of the instances (at least 3), and the total time elapsed to acquire the lock is less than lock validity time, the lock is considered to be acquired.</p>
</li>
<li>
<p>If the lock was acquired, its validity time is considered to be the initial validity time minus the time elapsed, as computed in step 3.</p>
</li>
<li>
<p>If the client failed to acquire the lock for some reason (either it was not able to lock N/2+1 instances or the validity time is negative), it will try to unlock all the instances (even the instances it believed it was not able to lock).</p>
</li>
<li>
<p>它以毫秒为单位获取当前时间。</p>
</li>
<li>
<p>它尝试顺序获取所有 N 个实例中的锁，在所有实例中使用相同的键名和随机值。在步骤 2 中，当在每个实例中设置锁时，客户端使用一个与锁自动释放总时间相比较小的 timeout 来获取它（防止单点阻塞）。例如，如果锁的自动释放时间为 10 秒，则 timeout 可能在 ~ 5-50 毫秒范围内。这可以防止客户端在尝试与已关闭的 Redis 节点通信时长时间保持阻塞：如果一个实例不可用，我们应该尽快尝试与下一个实例通信。</p>
</li>
<li>
<p>客户端通过从当前时间中减去步骤 1 中获得的时间戳来计算获取锁所用的时间。当且仅当客户端能够在大多数实例中获取锁（至少 3 个） ，且获取锁的总时间小于锁的有效时间，则认为锁已被获取。</p>
</li>
<li>
<p>如果获得了锁，则其有效时间被认为是初始有效时间减去经过的时间，如步骤 3 中计算的那样。</p>
</li>
<li>
<p>如果客户端由于某种原因未能获得锁（它无法锁定 N/2+1 个实例或有效时间为负数），它将尝试解锁所有实例（甚至是它认为无法锁定的实例）。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="is-the-algorithm-asynchronous">Is the algorithm asynchronous?<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#is-the-algorithm-asynchronous" class="hash-link" aria-label="Is the algorithm asynchronous?的直接链接" title="Is the algorithm asynchronous?的直接链接">​</a></h2>
<p>The algorithm relies on the assumption that while there is no synchronized clock across the processes, still the local time in every process flows approximately at the same rate, with an error which is small compared to the auto-release time of the lock. This assumption closely resembles a real-world computer: every computer has a local clock and we can usually rely on different computers to have a clock drift which is small.</p>
<p>该算法依赖于这样一个假设：虽然进程之间没有同步时钟，但每个进程中的本地时间仍然以大致相同的速率流动，与锁的自动释放时间相比，误差很小。这个假设非常类似于现实世界的计算机：每台计算机都有一个本地时钟，我们通常可以依靠不同的计算机来获得很小的时钟漂移。</p>
<p>At this point we need to better specify our mutual exclusion rule: it is guaranteed only as long as the client holding the lock will terminate its work within the lock validity time (as obtained in step 3), minus some time (just a few milliseconds in order to compensate for clock drift between processes).</p>
<p>此时我们需要更好地指定我们的互斥规则：只有持有锁的客户端会在锁的有效期内（如步骤 3 中获得）内终止其工作，减去一些时间（仅几毫秒，才能保证互斥规则为了补偿进程之间的时钟漂移）。</p>
<p>For more information about similar systems requiring a bound <em>clock drift</em>, this paper is an interesting reference: <a href="http://dl.acm.org/citation.cfm?id=74870" target="_blank" rel="noopener noreferrer">Leases: an efficient fault-tolerant mechanism for distributed file cache consistency</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="retry-on-failure">Retry on failure<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#retry-on-failure" class="hash-link" aria-label="Retry on failure的直接链接" title="Retry on failure的直接链接">​</a></h2>
<p>When a client is unable to acquire the lock, it should try again after a random delay in order to try to desynchronize multiple clients trying to acquire the lock for the same resource at the same time (this may result in a split brain condition where nobody wins). Also the faster a client tries to acquire the lock in the majority of Redis instances, the smaller the window for a split brain condition (and the need for a retry), so ideally the client should try to send the SET commands to the N instances at the same time using multiplexing.</p>
<p>当客户端无法获取锁时，它应该在随机延迟后再次尝试，这是为了尽可能同步多个客户端同时尝试获取同一资源的锁（这可能会导致没有人获胜的脑裂状态）。此外，客户端在大多数 Redis 实例中尝试获取锁的速度越快，裂脑条件的窗口就越小（以及重试的需要），因此理想情况下，客户端应该尝试将 SET 命令发送到 N 个实例同时使用多路复用。</p>
<p>It is worth stressing how important it is for clients that fail to acquire the majority of locks, to release the (partially) acquired locks ASAP, so that there is no need to wait for key expiry in order for the lock to be acquired again (however if a network partition happens and the client is no longer able to communicate with the Redis instances, there is an availability penalty to pay as it waits for key expiration).</p>
<p>值得强调的是，对于未能获得大部分锁的客户端来说，尽快释放（部分）获得的锁是多么重要，这样就无需等待密钥到期才能再次获得锁（但是，如果发生网络分区并且客户端不再能够与 Redis 实例通信，则需要承担「等待密钥到期」的性能损失）。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="releasing-the-lock">Releasing the lock<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#releasing-the-lock" class="hash-link" aria-label="Releasing the lock的直接链接" title="Releasing the lock的直接链接">​</a></h2>
<p>Releasing the lock is simple and involves just releasing the lock in all instances, whether or not the client believes it was able to successfully lock a given instance.</p>
<p>释放锁很简单，只涉及在所有实例中释放锁，无论客户端是否相信它能够成功锁定给定实例。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="safety-arguments">Safety arguments<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#safety-arguments" class="hash-link" aria-label="Safety arguments的直接链接" title="Safety arguments的直接链接">​</a></h2>
<p>Is the algorithm safe? We can try to understand what happens in different scenarios.</p>
<p>算法安全吗？我们可以尝试了解在不同情况下会发生什么。</p>
<p>To start let’s assume that a client is able to acquire the lock in the majority of instances. All the instances will contain a key with the same <strong>time to live</strong>. However, the key was set at different times, so the keys will also expire at different times. But if the first key was set at worst at time T1 (the time we sample before contacting the first server) and the last key was set at worst at time T2 (the time we obtained the reply from the last server), we are sure that the first key to expire in the set will exist for at least <code>MIN_VALIDITY=TTL-(T2-T1)-CLOCK_DRIFT</code>(TTL Time To Live). All the other keys will expire later, so we are sure that the keys will be simultaneously set for at least this time.</p>
<p>首先让我们假设客户端能够在大多数情况下获取锁。所有实例都将包含一个具有相同生存时间的 key。但是，key 是在不同的时间设置的，所以 key 也会在不同的时间过期。但是如果第一个密钥在时间 T1（我们在联系第一台服务器之前采样的时间）设置为最差，而最后一个密钥在时间 T2（我们从最后一个服务器获得回复的时间）设置为最差，我们确定集合中第一个过期的密钥将至少存在 <code>MIN_VALIDITY = TTL-(T2-T1)-CLOCK_DRIFT</code>。所有其他密钥都将在稍后过期，因此我们确信这些 key 将至少在段时间内同时设置。</p>
<p>During the time that the majority of keys are set, another client will not be able to acquire the lock, since N/2+1 SET NX operations can’t succeed if N/2+1 keys already exist. So if a lock was acquired, it is not possible to re-acquire it at the same time (violating the mutual exclusion property).</p>
<p>在设置大部分键的时间内，另一个客户端将无法获取锁，因为如果 N/2+1 个键已经存在，则 N/2+1 个 <code>SET NX</code> 操作将无法成功。所以如果获得了一个锁，就不可能同时重新获得它（违反互斥属性）。</p>
<p>However we want to also make sure that multiple clients trying to acquire the lock at the same time can’t simultaneously succeed.</p>
<p>但是，我们还想确保多个客户端同时尝试获取锁不能同时成功。</p>
<p>If a client locked the majority of instances using a time near, or greater, than the lock maximum validity time (the TTL we use for SET basically), it will consider the lock invalid and will unlock the instances, so we only need to consider the case where a client was able to lock the majority of instances in a time which is less than the validity time. In this case for the argument already expressed above, for <code>MIN_VALIDITY</code> no client should be able to re-acquire the lock. So multiple clients will be able to lock N/2+1 instances at the same time (with "time" being the end of Step 2) only when the time to lock the majority was greater than the TTL time, making the lock invalid.</p>
<p>如果客户端使用接近或大于锁最大有效时间（基本上就是我们给 SET 操作设置的的 TTL）的时间锁定大多数实例，它将认为锁无效并解锁实例，所以我们只需要考虑客户端能够在小于有效时间的时间内锁定大多数实例的情况。在这种情况下，对于上面已经表达的参数，对于“MIN_VALIDITY”，没有客户端应该能够重新获取锁。因此，只有当锁定多数的时间大于 TTL 时间时，多个客户端才能同时锁定 N/2+1 个实例（“时间”是步骤 2 的结束），如前文所述，锁定会被判定为无效。</p>
<p>Are you able to provide a formal proof of safety, point to existing algorithms that are similar, or find a bug? That would be greatly appreciated.</p>
<p>您是否能够提供正式的安全证明、指出现有的相似算法或发现错误？那将不胜感激。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="liveness-arguments">Liveness arguments<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#liveness-arguments" class="hash-link" aria-label="Liveness arguments的直接链接" title="Liveness arguments的直接链接">​</a></h2>
<p>The system liveness is based on three main features:</p>
<p>系统活跃度基于三个主要特征：</p>
<ol>
<li>
<p>The auto release of the lock (since keys expire): eventually keys are available again to be locked.</p>
</li>
<li>
<p>The fact that clients, usually, will cooperate removing the locks when the lock was not acquired, or when the lock was acquired and the work terminated, making it likely that we don’t have to wait for keys to expire to re-acquire the lock.</p>
</li>
<li>
<p>The fact that when a client needs to retry a lock, it waits a time which is comparably greater than the time needed to acquire the majority of locks, in order to probabilistically make split brain conditions during resource contention unlikely.</p>
</li>
<li>
<p>锁的自动释放（因为 key 过期）：最终 key 可以再次被锁定。</p>
</li>
<li>
<p>事实上，客户端通常会在未获取锁或获取锁但工作终止时合作移除锁，这使得我们可能不必等待密钥过期来重新获取锁。</p>
</li>
<li>
<p>事实上，当客户端需要重试锁时，它等待的时间比获取大多数锁所需的时间要长得多，以便在资源争用期间不太可能出现脑裂情况。</p>
</li>
</ol>
<p>However, we pay an availability penalty equal to TTL time on network partitions, so if there are continuous partitions, we can pay this penalty indefinitely. This happens every time a client acquires a lock and gets partitioned away before being able to remove the lock.</p>
<p>Basically if there are infinite continuous network partitions, the system may become not available for an infinite amount of time.</p>
<p>基本上，如果有无限连续的网络分区，系统可能会在无限长的时间内变得不可用。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="performance-crash-recovery-and-fsync">Performance, crash-recovery and fsync<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#performance-crash-recovery-and-fsync" class="hash-link" aria-label="Performance, crash-recovery and fsync的直接链接" title="Performance, crash-recovery and fsync的直接链接">​</a></h2>
<p>Many users using Redis as a lock server need high performance in terms of both latency to acquire and release a lock, and number of acquire / release operations that it is possible to perform per second. In order to meet this requirement, the strategy to talk with the N Redis servers to reduce latency is definitely multiplexing (or poor man's multiplexing, which is, putting the socket in non-blocking mode, send all the commands, and read all the commands later, assuming that the RTT(Round-trip delay 往返延误) between the client and each instance is similar).</p>
<p>许多使用 Redis 作为锁服务器的用户在获取和释放锁的延迟以及每秒可以执行的获取/释放操作的数量方面都需要高性能。为了满足这个需求，与 N 台 Redis 服务器对话以减少延迟的策略肯定是多路复用（或者说穷人的多路复用，也就是将 socket 置于非阻塞模式，发送所有命令，稍后读取所有命令，假设客户端和每个实例之间的 RTT 是相似的）。</p>
<p>However there is another consideration to do about persistence if we want to target a crash-recovery system model.</p>
<p>然而，如果我们想要针对崩溃恢复系统模型，还有另一个关于持久性的考虑。</p>
<p>Basically to see the problem here, let’s assume we configure Redis without persistence at all. A client acquires the lock in 3 of 5 instances. One of the instances where the client was able to acquire the lock is restarted, at this point there are again 3 instances that we can lock for the same resource, and another client can lock it again, violating the safety property of exclusivity of lock.</p>
<p>基本上看这里的问题，让我们假设我们配置 Redis 时完全没有持久化。客户端在 5 个实例中的 3 个中获得了锁。其中一个客户端能够获得锁的实例被重启，此时我们又可以为同一个资源锁定 3 个实例，另一个客户端可以再次锁定它，违反了锁的排他性的安全属性。</p>
<p>If we enable AOF persistence, things will improve quite a bit. For example we can upgrade a server by sending SHUTDOWN and restarting it. Because Redis expires are semantically implemented so that virtually the time still elapses when the server is off, all our requirements are fine. However everything is fine as long as it is a clean shutdown. What about a power outage? If Redis is configured, as by default, to fsync on disk every second, it is possible that after a restart our key is missing. In theory, if we want to guarantee the lock safety in the face of any kind of instance restart, we need to enable fsync=always in the persistence setting. This in turn will totally ruin performances to the same level of CP systems that are traditionally used to implement distributed locks in a safe way.</p>
<p>如果我们启用 AOF 持久性，事情会改善很多。例如，我们可以通过发送 SHUTDOWN 并重新启动它来升级服务器。因为 Redis 过期是在语义上实现的，所以当服务器关闭时，实际上时间仍然过去，我们所有的要求都很好。但是，只要它是干净的关闭，一切都很好。停电怎么办？如果 Redis 默认配置为每秒在磁盘上 fsync 一次，那么重启后我们的 key 可能会丢失。理论上，如果我们想在任何类型的实例重启时保证锁的安全性，我们需要在持久化设置中启用 fsync=always。这反过来又会完全破坏与传统上用于以安全方式实现分布式锁的 CP 系统相同级别的性能。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Consistency_model" target="_blank" rel="noopener noreferrer">Consistency</a>
Every read receives the most recent write or an error.</p>
<p><a href="https://en.wikipedia.org/wiki/Availability" target="_blank" rel="noopener noreferrer">Availability</a>
Every request receives a (non-error) response, without the guarantee that it contains the most recent write.</p>
<p><a href="https://en.wikipedia.org/wiki/Network_partitioning" target="_blank" rel="noopener noreferrer">Partition tolerance</a>
The system continues to operate despite(尽管) an arbitrary number of messages being dropped (or delayed) by the network between nodes.</p>
</blockquote>
<p>However things are better than what they look like at a first glance. Basically the algorithm safety is retained as long as when an instance restarts after a crash, it no longer participates to any <strong>currently active</strong> lock, so that the set of currently active locks when the instance restarts, were all obtained by locking instances other than the one which is rejoining the system.</p>
<p>然而，事情比乍看之下要好。基本上算法安全性只要在实例崩溃后重启时，不再参与任何<strong>当前活动的</strong>锁，因此实例重启时当前活动的锁集合，都是通过锁定实例获得的除了重新加入系统的那个。</p>
<p>To guarantee this we just need to make an instance, after a crash, unavailable for at least a bit more than the max TTL we use, which is, the time needed for all the keys about the locks that existed when the instance crashed, to become invalid and be automatically released.</p>
<p>为了保证这一点，我们只需要创建一个实例，在崩溃之后，至少比我们使用的最大 TTL 多一点之后再变得可用，即所有关于锁的键所需的时间实例崩溃时存在的，变为无效并自动释放。</p>
<p>Using <em>delayed restarts</em> it is basically possible to achieve safety even without any kind of Redis persistence available, however note that this may translate into an availability penalty. For example if a majority of instances crash, the system will become globally unavailable for TTL (here globally means that no resource at all will be lockable during this time).</p>
<p>使用 <em>delayed restarts</em> 基本上可以实现安全，即使没有任何可用的 Redis 持久性，但是请注意，这可能会转化为可用性损失。例如，如果大多数实例崩溃，系统将在 TTL 期间全局不可用（这里全局意味着在此期间根本没有资源可锁定）。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="making-the-algorithm-more-reliable-extending-the-lock">Making the algorithm more reliable: Extending the lock<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#making-the-algorithm-more-reliable-extending-the-lock" class="hash-link" aria-label="Making the algorithm more reliable: Extending the lock的直接链接" title="Making the algorithm more reliable: Extending the lock的直接链接">​</a></h2>
<p>If the work performed by clients is composed of small steps, it is possible to use smaller lock validity times by default, and extend the algorithm implementing a lock extension mechanism. Basically the client, if in the middle of the computation while the lock validity is approaching a low value, may extend the lock by sending a Lua script to all the instances that extends the TTL of the key if the key exists and its value is still the random value the client assigned when the lock was acquired.</p>
<p>如果客户端执行的工作由小步骤组成，则可以默认使用较小的锁有效时间，并扩展实现锁扩展机制的算法。基本上客户端，如果在计算过程中锁有效性接近一个低值（快过期了），可以通过向所有实例发送一个 Lua 脚本来扩展锁，条件是密钥存在并且它的值仍然是获取锁时客户端分配的随机值。</p>
<p>The client should only consider the lock re-acquired if it was able to extend the lock into the majority of instances, and within the validity time (basically the algorithm to use is very similar to the one used when acquiring the lock).</p>
<p>如果客户端能够将锁扩展到大多数实例，并且在有效时间内（基本上使用的算法与获取锁时使用的算法非常相似），客户端应该只考虑重新获取锁。</p>
<p>However this does not technically change the algorithm, so the maximum number of lock reacquisition attempts should be limited, otherwise one of the liveness properties is violated.</p>
<p>然而，这在技术上并没有改变算法，因此应该限制重新获取锁的最大尝试次数，否则会违反 liveness properties 之一。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-help">Want to help?<a href="https://solidspoon.xyz/blog/distributed-locks-with-redis#want-to-help" class="hash-link" aria-label="Want to help?的直接链接" title="Want to help?的直接链接">​</a></h2>
<hr>
<p>If you are into distributed systems, it would be great to have your opinion / analysis. Also reference implementations in other languages could be great.</p>
<p>如果您进入分布式系统，那么有您的意见/分析会很棒。其他语言的参考实现也可能很棒。</p>
<p>Thanks in advance!</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ClashForWindows tap 模式无法正常连接网络]]></title>
        <id>https://solidspoon.xyz/blog/clash-for-windows-tap-mode-cannot-connect-to-network-normally</id>
        <link href="https://solidspoon.xyz/blog/clash-for-windows-tap-mode-cannot-connect-to-network-normally"/>
        <updated>2022-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ClashForWindows 正常情况下只能代理通过 Http 或 Socks 代理工作。这两种协议工作在网络模型中的较高层级，可能无法代理系统全部的流量，比如对 SSH 或 WSL 等不起作用，使用时需要对这些应用单独配置。其实下面这几个选项可以让 ClashForWindows 有能力在 TCP/IP 层级工作，从而代理系统全部流量，具体的教程参见官方文档]]></summary>
        <content type="html"><![CDATA[<p>ClashForWindows 正常情况下只能代理通过 Http 或 Socks 代理工作。这两种协议工作在网络模型中的较高层级，可能无法代理系统全部的流量，比如对 SSH 或 WSL 等不起作用，使用时需要对这些应用单独配置。其实下面这几个选项可以让 ClashForWindows 有能力在 TCP/IP 层级工作，从而代理系统全部流量，具体的教程参见<a href="https://docs.cfw.lbyczf.com/contents/tun.html#windows" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/2021/12/02/20211202-230605.png" alt="image-20211202230604161" class="img_ev3q"></p>
<p>这里主要提一下通过官方文档操作之后无法正常代理的情况，这种情况 GitHub 的 issue 上已经有了解决方案，<a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1243" target="_blank" rel="noopener noreferrer">链接</a>。如果你也连不上网，不妨排查一下网卡的驱动或相关应用</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/2021/12/02/20211202-231144.png" alt="image-20211202231142928" class="img_ev3q"></p>
<p>使用上述方法代理系统全部流量时，可以关闭 ClashForWindows 的 System Proxy 开关，也会正常工作。</p>
<p>需要提及一下，这种方法虽然可以代理全部系统流量，看起来十分强大，但它的性能不如直接使用 Http 或 Socks 代理，所以还是要看情况使用不同的代理方案。</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="教程" term="教程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 函数式编程详解]]></title>
        <id>https://solidspoon.xyz/blog/java-functional-programming-explained</id>
        <link href="https://solidspoon.xyz/blog/java-functional-programming-explained"/>
        <updated>2021-09-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[概要]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="概要">概要<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#%E6%A6%82%E8%A6%81" class="hash-link" aria-label="概要的直接链接" title="概要的直接链接">​</a></h2>
<p>首先一个简单的示例展示一下什么是函数式编程</p>
<p>假设我们有一个「Person」列表</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;Person&gt; people = List.of(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("John", MALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Maria", FEMALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Aisha", FEMALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Alex", MALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Alice", FEMALE)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>「Person」的定义如下</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private record Person(String name, Gender gender) {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">enum Gender {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MALE, FEMALE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如果我们想在列表中找到 FEMALE，我们可以使用这样的命令式方法</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;Person&gt; females = new ArrayList&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for (Person person : people) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (FEMALE.equals(person.gender)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        females.add(person);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for (Person female : females) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    System.out.println(female);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>但它在声明式方法中更简洁</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var females2 = people.stream().filter(personPredicate)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .collect(Collectors.toList());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//          .forEach(System.out::println);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">females2.forEach(System.out::println);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>完整代码如下：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Main {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Person&gt; people = List.of(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new Person("John", MALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new Person("Maria", FEMALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new Person("Aisha", FEMALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new Person("Alex", MALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new Person("Alice", FEMALE)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Imperative approach");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Imperative approach</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Person&gt; females = new ArrayList&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Person person : people) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (FEMALE.equals(person.gender)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                females.add(person);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (Person female : females) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(female);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Declarative approach</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Declarative approach");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var females2 = people.stream().filter(personPredicate)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .collect(Collectors.toList());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//                .forEach(System.out::println);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        females2.forEach(System.out::println);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private record Person(String name, Gender gender) {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    enum Gender {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        MALE, FEMALE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="function-and-bifunction">Function and BiFunction<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#function-and-bifunction" class="hash-link" aria-label="Function and BiFunction的直接链接" title="Function and BiFunction的直接链接">​</a></h2>
<p><code>Function</code> 表示接受一个参数 &lt;T&gt; 并产生结果 &lt;R&gt; 的函数。</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Function&lt;T, R&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>以下是 <code>Function</code> 的一些例子</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static Function&lt;Integer, Integer&gt; incrementByOneFunction = number -&gt; number + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">static Function&lt;Integer, Integer&gt; multiplyBy10Function = number -&gt; number * 10;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var increment2 = incrementByOneFunction.apply(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var multiply = multiplyBy10Function.apply(increment2);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>酷，如果你看不懂，那么我们之前用命令式编程是这么写的</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static int incrementByOne(int number) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return number + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var increment = incrementByOne(1);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>更进一步，我们可以结合两个 Function</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var addBy1AndThenMultiplyBy10 = incrementByOneFunction.andThen(multiplyBy10Function);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var ans = addBy1AndThenMultiplyBy10.apply(4);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>BiFunction</code> 表示一个接受两个参数并产生结果的函数。</p>
<p>作为对比，这是一个传统的二参数方法</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static int incrementByOneAndMultiply(int number, int numberToMultiplyBy) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return (number + 1) * numberToMultiplyBy;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">incrementByOneAndMultiply(4, 100);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在函数式编程中，我们这样写</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static BiFunction&lt;Integer, Integer, Integer&gt; incrementByOneAndMultiplyBiFunction =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (numberToIncrementByOne, numberToMultiplyBy)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                -&gt; (numberToIncrementByOne + 1) * numberToMultiplyBy;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">incrementByOneAndMultiplyBiFunction.apply(4, 100);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>完整代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class _Function {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Function takes 1 argument and produce 1 result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var increment = incrementByOne(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(increment);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var increment2 = incrementByOneFunction.apply(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(increment2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var multiply = multiplyBy10Function.apply(increment2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(multiply);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var addBy1AndThenMultiplyBy10 = incrementByOneFunction.andThen(multiplyBy10Function);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var ans = addBy1AndThenMultiplyBy10.apply(4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(ans);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // BiFunction takes 2 argument and produce 1 result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(incrementByOneAndMultiply(4, 100));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(incrementByOneAndMultiplyBiFunction.apply(4, 100));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static Function&lt;Integer, Integer&gt; incrementByOneFunction = number -&gt; number + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static Function&lt;Integer, Integer&gt; multiplyBy10Function = number -&gt; number * 10;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static int incrementByOne(int number) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return number + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static BiFunction&lt;Integer, Integer, Integer&gt; incrementByOneAndMultiplyBiFunction =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (numberToIncrementByOne, numberToMultiplyBy)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    -&gt; (numberToIncrementByOne + 1) * numberToMultiplyBy;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static int incrementByOneAndMultiply(int number, int numberToMultiplyBy) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return (number + 1) * numberToMultiplyBy;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consumer-and-biconsumer">Consumer and BiConsumer<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#consumer-and-biconsumer" class="hash-link" aria-label="Consumer and BiConsumer的直接链接" title="Consumer and BiConsumer的直接链接">​</a></h2>
<p><code>Consumer</code> 表示接受单个输入参数并且不返回结果的操作。与大多数其他 Functional interface 不同，<strong><code>Consumer</code> 预计通过副作用进行操作</strong>。</p>
<p>我们的 <code>Customer</code> 定义如下</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static record Customer(String customerName, String customerPhoneNumber) {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var maria = new Customer("Maria", "99999");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在命令式编程中，我们这样编写代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static void greetConsumer(Customer customer) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            + customer.customerPhoneNumber);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">greetConsumer(maria);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在函数式编程中，我们这样编写代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static Consumer&lt;Customer&gt; greetCustomerConsumer = customer -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + customer.customerPhoneNumber);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">greetCustomerConsumer.accept(maria);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>BiConsumer</code> 是 <code>Consumer</code> 的二参数版本，它表示一个接受两个输入参数并且不返回结果的操作。</p>
<p>我们通常编写下面这种命令式编程方法</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static void greetConsumerV2(Customer customer, boolean showPhoneNumber) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            + (showPhoneNumber ? customer.customerPhoneNumber : "*********"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">greetConsumerV2(maria, false);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这是函数式编程版本</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static BiConsumer&lt;Customer, Boolean&gt; greetCustomerConsumerV2 = (customer, showPhoneNumber) -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + (showPhoneNumber ? customer.customerPhoneNumber : "*********"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">greetCustomerConsumerV2.accept(maria, false);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>全部代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class _Consumer {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var maria = new Customer("Maria", "99999");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Normal java function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        greetConsumer(maria);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Consumer Functional interface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        greetCustomerConsumer.accept(maria);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        greetCustomerConsumerV2.accept(maria, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        greetConsumerV2(maria, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static BiConsumer&lt;Customer, Boolean&gt; greetCustomerConsumerV2 = (customer, showPhoneNumber) -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    + (showPhoneNumber ? customer.customerPhoneNumber : "*********"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static Consumer&lt;Customer&gt; greetCustomerConsumer = customer -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    + customer.customerPhoneNumber);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static void greetConsumer(Customer customer) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + customer.customerPhoneNumber);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static void greetConsumerV2(Customer customer, boolean showPhoneNumber) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello" + customer.customerName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + ", thanks for registering phone number "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                + (showPhoneNumber ? customer.customerPhoneNumber : "*********"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static record Customer(String customerName, String customerPhoneNumber) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="predicate">Predicate<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#predicate" class="hash-link" aria-label="Predicate的直接链接" title="Predicate的直接链接">​</a></h2>
<p><code>Predicate</code> 表示一个布尔值函数</p>
<p>在命令式编程中通过这样写达到相同目的</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static boolean isPhoneNumberValid(String phoneNumber) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return phoneNumber.startsWith("07") &amp;&amp; phoneNumber.length() == 11;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var phoneNumberValid = isPhoneNumberValid("07000000000");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在函数式编程中，你可以这样写</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static Predicate&lt;String&gt; isPhoneNumberValidPredicate = phoneNumber -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        phoneNumber.startsWith("07") &amp;&amp; phoneNumber.length() == 11;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">static Predicate&lt;String&gt; containsNumber3 = phoneNumber -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        phoneNumber.contains("3");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(isPhoneNumberValidPredicate.test("09009877300"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "Is phone number valid and contains number 3 = " +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                isPhoneNumberValidPredicate.and(containsNumber3).test("07009877300")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var isPhoneNumberValidAndContainsNumber3 = isPhoneNumberValidPredicate.or(containsNumber3);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "Is phone number valid or contains number 3 = " +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                isPhoneNumberValidAndContainsNumber3.test("07000000000")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>还记得我们在概要中写的代码 <code>stream().filter()</code> 吗？</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var females2 = people.stream().filter(person -&gt; FEMALE.equals(person.gender))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .collect(Collectors.toList());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>filter</code> 接收的参数就是 <code>Predicate</code> ，在 idea 中使用快捷键 「Ctrl + Alt + V」将它的参数提取成变量，我们就会看到 <code>Predicate</code></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var females2 = people.stream().filter(personPredicate)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .collect(Collectors.toList());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>完整代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class _Predicate {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Without predicate");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var phoneNumberValid = isPhoneNumberValid("07000000000");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(phoneNumberValid);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(isPhoneNumberValid("0700000000"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(isPhoneNumberValid("09009877300"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("With Predicate");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(isPhoneNumberValidPredicate.test("07000000000"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(isPhoneNumberValidPredicate.test("0700000000"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(isPhoneNumberValidPredicate.test("09009877300"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "Is phone number valid and contains number 3 = " +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        isPhoneNumberValidPredicate.and(containsNumber3).test("07009877300")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var isPhoneNumberValidAndContainsNumber3 = isPhoneNumberValidPredicate.or(containsNumber3);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "Is phone number valid or contains number 3 = " +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        isPhoneNumberValidAndContainsNumber3.test("07000000000")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static boolean isPhoneNumberValid(String phoneNumber) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return phoneNumber.startsWith("07") &amp;&amp; phoneNumber.length() == 11;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static Predicate&lt;String&gt; isPhoneNumberValidPredicate = phoneNumber -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            phoneNumber.startsWith("07") &amp;&amp; phoneNumber.length() == 11;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static Predicate&lt;String&gt; containsNumber3 = phoneNumber -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            phoneNumber.contains("3");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="�复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="supplier">Supplier<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#supplier" class="hash-link" aria-label="Supplier的直接链接" title="Supplier的直接链接">​</a></h2>
<p><code>Supplier</code> 不接收任何参数并提供一个结果</p>
<p>在命令式编程中我们可以这样写</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static String getDbConnectionUrl() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return "jdbc://localhost:5432/users";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(getDbConnectionUrl());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>函数式编程的版本</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static Supplier&lt;String&gt; getDbConnectionUrlSupplier = () -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "jdbc://localhost:5432/users";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">static Supplier&lt;List&lt;String&gt;&gt; getDbConnectionListUrlSupplier = () -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List.of(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "jdbc://localhost:5432/users",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "jdbc://localhost:5432/customer"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(getDbConnectionUrlSupplier.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(getDbConnectionListUrlSupplier.get());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>完整代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class _Supplier {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(getDbConnectionUrl());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(getDbConnectionUrlSupplier.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(getDbConnectionListUrlSupplier.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static String getDbConnectionUrl() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return "jdbc://localhost:5432/users";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static Supplier&lt;String&gt; getDbConnectionUrlSupplier = () -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "jdbc://localhost:5432/users";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static Supplier&lt;List&lt;String&gt;&gt; getDbConnectionListUrlSupplier = () -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            List.of(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "jdbc://localhost:5432/users",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    "jdbc://localhost:5432/customer"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="stream">Stream<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#stream" class="hash-link" aria-label="Stream的直接链接" title="Stream的直接链接">​</a></h2>
<p>首先将前文的定义 Persion 的代码复制过来</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private record Person(String name, Gender gender) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">enum Gender {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MALE, FEMALE, PREFER_NOT_TO_SAY</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;Person&gt; people = List.of(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("John", MALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Maria", FEMALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Aisha", FEMALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Alex", MALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Alice", FEMALE),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Person("Bob", PREFER_NOT_TO_SAY)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通过 Stream 来调用</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">people.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .map(Person::name)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .mapToInt(String::length)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//        .collect(Collectors.toSet())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .forEach(System.out::println);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们可以把每一步的参数提取成变量，方便观察它们的类型</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Function&lt;Person, String&gt; personStringFunction = Person::name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ToIntFunction&lt;String&gt; length = String::length;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        IntConsumer println = System.out::println;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        people.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .map(personStringFunction)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .mapToInt(length)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//                .collect(Collectors.toSet())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .forEach(println);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Stream 的其他用法</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var containOnlyFemales = people.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .allMatch(personPredicate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(containOnlyFemales);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var personHaveFemales = people.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .anyMatch(personPredicate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//      .noneMatch(personPredicate);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(personHaveFemales);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="optional">Optional<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#optional" class="hash-link" aria-label="Optional的直接链接" title="Optional的直接链接">​</a></h2>
<p><code>Optional</code> 会改变你处理空指针的方式</p>
<p>示例：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var value = Optional.ofNullable(null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .orElseGet(() -&gt; "default value");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var value2 = Optional.ofNullable("hello")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .orElseGet(() -&gt; "default value");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>示例2：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Supplier&lt;IllegalStateException&gt; exception = () -&gt; new IllegalStateException("exception");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var value3 = Optional.ofNullable("hello")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .orElseThrow(exception);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>示例3：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Optional.ofNullable("john.gmail.com")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .ifPresent(email -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println("Sending email to " + email));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Optional.ofNullable(null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .ifPresentOrElse(email -&gt; System.out.println("Sending email to " + email),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                () -&gt; System.out.println("Can not send email"));</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>完整代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Main {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var value = Optional.ofNullable(null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .orElseGet(() -&gt; "default value");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var value2 = Optional.ofNullable("hello")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .orElseGet(() -&gt; "default value");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(value2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Supplier&lt;IllegalStateException&gt; exception = () -&gt; new IllegalStateException("exception");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var value3 = Optional.ofNullable("hello")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .orElseThrow(exception);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Optional.ofNullable("john.gmail.com")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .ifPresent(email -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        System.out.println("Sending email to " + email));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Optional.ofNullable(null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .ifPresentOrElse(email -&gt; System.out.println("Sending email to " + email),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        () -&gt; System.out.println("Can not send email"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="combinator-pattern">Combinator Pattern<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#combinator-pattern" class="hash-link" aria-label="Combinator Pattern的直接链接" title="Combinator Pattern的直接链接">​</a></h2>
<p>我们有一个 Customer 类定义如下</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public record Customer(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String name,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String email,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String phoneNumber,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        LocalDate dob</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Customer customer = new Customer(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "alice@gmail.com",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "+089998879",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        LocalDate.of(2000, 1, 1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们想验证此人的信息是否合法。在命令式编程中，我们可以这样验证</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class CustomerValidatorService {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private boolean isEmailValid(String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return email.contains("@");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private boolean isPhoneNumberValid(String phoneNumber) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return phoneNumber.startsWith("+0");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private boolean isAdult(LocalDate dob) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return Period.between(dob, LocalDate.now()).getYears() &gt; 16;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public boolean isValid(Customer customer) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return isEmailValid(customer.email())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &amp;&amp; isPhoneNumberValid(customer.phoneNumber())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &amp;&amp; isAdult(customer.dob());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---usage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(new CustomerValidatorService().isValid(customer));</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>可以看到，当我们需要添加验证项或者需要根据不同的用户启用不同的验证策略时，上面的方法需要改动太多的代码。这种方法的另一个缺点是：当验证失败时，我们无法知道对象的哪个属性没有通过验证，该方法只是返回一个失败的结果，这个结果并不包含细节。</p>
<p>我这里介绍的解决方案叫做 Combinator Pattern</p>
<p>为了能够返回方法的详细信息，我们首先定义一个枚举类</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">enum ValidationResult {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    SUCCESS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PHONE_NUMBER_NOT_VALID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    EMAIL_NOT_VALID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    IS_NOT_AN_ADULT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们使用 <code>CustomerRegistrationValidator interface</code> 扩展 <code>Functional interface</code></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public interface CustomerRegistrationValidator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        extends Function&lt;Customer, ValidationResult&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator isEmailValid() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt; customer.email().contains("@") ?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SUCCESS : EMAIL_NOT_VALID;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator isPhoneNumberValid() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt; customer.phoneNumber().startsWith("+0") ?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SUCCESS : PHONE_NUMBER_NOT_VALID;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator isAnAdult() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Period.between(customer.dob(), LocalDate.now()).getYears() &gt; 16 ?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        SUCCESS : IS_NOT_AN_ADULT;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * test lazy load</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator printSomething() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt;{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("print something");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return SUCCESS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    default CustomerRegistrationValidator and (CustomerRegistrationValidator other) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ValidationResult result = this.apply(customer);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return result.equals(SUCCESS) ? other.apply(customer) : result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    enum ValidationResult {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        SUCCESS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PHONE_NUMBER_NOT_VALID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        EMAIL_NOT_VALID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        IS_NOT_AN_ADULT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>用法很简单</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var result = isEmailValid()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .and(isPhoneNumberValid())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .and(isAnAdult())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .apply(customer);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (result != ValidationResult.SUCCESS) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new IllegalStateException(result.name());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>使用这种方法，我们可以灵活地组合多个验证。当验证失败时，该方法会返回失败的原因</p>
<p>此外，它是延迟加载，也就是直到调用 <code>apply()</code> 时才会真正执行</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var result2 = isEmailValid()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .and(isPhoneNumberValid())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .and(isAnAdult())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .and(printSomething());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">System.out.println("not load before apply()");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">result2.apply(customer);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>完整代码</p>
<p>调用方法</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Main {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Customer customer = new Customer(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "Alice",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "alice@gmail.com",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                "+089998879",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                LocalDate.of(2000, 1, 1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(new CustomerValidatorService().isValid(customer));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // If valid we can store customer in db</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Using combinator pattern</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var result = isEmailValid()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and(isPhoneNumberValid())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and(isAnAdult())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .apply(customer);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (result != ValidationResult.SUCCESS) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new IllegalStateException(result.name());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Lazy lode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var result2 = isEmailValid()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and(isPhoneNumberValid())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and(isAnAdult())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and(printSomething());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("not load before apply()");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result2.apply(customer);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>命令式编程</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class CustomerValidatorService {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private boolean isEmailValid(String email) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return email.contains("@");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private boolean isPhoneNumberValid(String phoneNumber) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return phoneNumber.startsWith("+0");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private boolean isAdult(LocalDate dob) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return Period.between(dob, LocalDate.now()).getYears() &gt; 16;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public boolean isValid(Customer customer) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return isEmailValid(customer.email())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &amp;&amp; isPhoneNumberValid(customer.phoneNumber())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &amp;&amp; isAdult(customer.dob());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>函数式编程</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public interface CustomerRegistrationValidator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        extends Function&lt;Customer, ValidationResult&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator isEmailValid() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt; customer.email().contains("@") ?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SUCCESS : EMAIL_NOT_VALID;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator isPhoneNumberValid() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt; customer.phoneNumber().startsWith("+0") ?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                SUCCESS : PHONE_NUMBER_NOT_VALID;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator isAnAdult() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Period.between(customer.dob(), LocalDate.now()).getYears() &gt; 16 ?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        SUCCESS : IS_NOT_AN_ADULT;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * test lazy load</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static CustomerRegistrationValidator printSomething() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt;{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("print something");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return SUCCESS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    default CustomerRegistrationValidator and (CustomerRegistrationValidator other) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return customer -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ValidationResult result = this.apply(customer);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return result.equals(SUCCESS) ? other.apply(customer) : result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    enum ValidationResult {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        SUCCESS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PHONE_NUMBER_NOT_VALID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        EMAIL_NOT_VALID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        IS_NOT_AN_ADULT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>entity</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public record Customer(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String name,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String email,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String phoneNumber,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        LocalDate dob</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) {}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="callbacks">Callbacks<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#callbacks" class="hash-link" aria-label="Callbacks的直接链接" title="Callbacks的直接链接">​</a></h2>
<p>由于 Java 的函数式接口，我们现在可以像 JavaScript 一样使用 callback</p>
<p>在 JavaScript 中，我们像这样定义带有回调的函数</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hello</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">firstName</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> lastName</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">firstName</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastName</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastName</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">callback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们可以在 Chrome 控制台中调用它</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">hello</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"john"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"no lastname provided"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>现在我们可以在 Java 中做同样的事情</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static void hello(String firstName, String lastName, Consumer&lt;String&gt; callback) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    System.out.println(firstName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (lastName != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(lastName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        callback.accept(firstName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">static void hello2(String firstName, String lastName, Runnable callback) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    System.out.println(firstName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (lastName != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(lastName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        callback.run();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>usage</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">hello("John", "Montana", null);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hello("John", null, value -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    System.out.println("no lastName provided for " + value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hello2("John", null,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        () -&gt; System.out.println("no lastName provided"));</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>完整代码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Callbacks {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hello("John", "Montana", null);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hello("John", null, value -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("no lastName provided for " + value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hello2("John", null,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                () -&gt; System.out.println("no lastName provided"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static void hello(String firstName, String lastName, Consumer&lt;String&gt; callback) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(firstName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (lastName != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(lastName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            callback.accept(firstName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static void hello2(String firstName, String lastName, Runnable callback) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(firstName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (lastName != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(lastName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            callback.run();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Callback function in js:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function hello(firstName, lastName,callback) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log(firstName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (lastName) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            console.log(lastName);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            callback();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Invoke it:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hello("john", null, function(){console.log("no lastname provided")})</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="函数式编程的特性">函数式编程的特性<a href="https://solidspoon.xyz/blog/java-functional-programming-explained#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E7%89%B9%E6%80%A7" class="hash-link" aria-label="函数式编程的特性的直接链接" title="函数式编程的特性的直接链接">​</a></h2>
<ul>
<li>无状态</li>
<li>纯函数</li>
<li>无副作用</li>
<li>高阶特性<!-- -->
<ul>
<li>函数将一个或多个函数作为参数。</li>
<li>函数返回另一个函数作为结果。</li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 线程间协作方法总结]]></title>
        <id>https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java</id>
        <link href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java"/>
        <updated>2021-03-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文总结一下我知道的 Java 线程间协作的方式，以计算斐波那契数列为例，新线程负责计算，主线程取得结果。]]></summary>
        <content type="html"><![CDATA[<p>本文总结一下我知道的 Java 线程间协作的方式，以计算斐波那契数列为例，新线程负责计算，主线程取得结果。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="不使用多线程并发工具">不使用多线程并发工具<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="不使用多线程并发工具的直接链接" title="不使用多线程并发工具的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用循环判断">使用循环判断<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#%E4%BD%BF%E7%94%A8%E5%BE%AA%E7%8E%AF%E5%88%A4%E6%96%AD" class="hash-link" aria-label="使用循环判断的直接链接" title="使用循环判断的直接链接">​</a></h3>
<p>指定一个变量作为信号，用循环的方式监控这个变量</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 使用循环不断判断</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class NoLockMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private volatile Integer valve = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void sum (int num) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        valve = fibo(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a - 1) + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int getValue() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (valve == null) {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return valve;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 再这里创建一个线程或线城池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行 下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final NoLockMethod method = new NoLockMethod();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            method.sum(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = method.getValue(); // 这是得到的返回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保拿到 resut 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算的结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 然后退出 main 线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">异步计算的结果为：1836311903</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">使用时间：6438 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用-threadjoin">使用 thread.join()<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#%E4%BD%BF%E7%94%A8-threadjoin" class="hash-link" aria-label="使用 thread.join()的直接链接" title="使用 thread.join()的直接链接">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 使用 Thread Join</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ThreadJoinMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        AtomicInteger value = new AtomicInteger();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(() -&gt;{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            value.set(sum());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.join();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = value.get(); // 这是拿到的返回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保 拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 然后退出 main 线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static int sum () {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a - 1) + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">异步计算结果为：1836311903</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">使用时间：5413 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用多线程并发工具">使用多线程并发工具<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="使用多线程并发工具的直接链接" title="使用多线程并发工具的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="不使用-future使用类似等待-通知机制">不使用 Future（使用类似等待-通知机制）<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#%E4%B8%8D%E4%BD%BF%E7%94%A8-future%E4%BD%BF%E7%94%A8%E7%B1%BB%E4%BC%BC%E7%AD%89%E5%BE%85-%E9%80%9A%E7%9F%A5%E6%9C%BA%E5%88%B6" class="hash-link" aria-label="不使用 Future（使用类似等待-通知机制）的直接链接" title="不使用 Future（使用类似等待-通知机制）的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="synchronized-wait-notify">Synchronized-wait-notify<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#synchronized-wait-notify" class="hash-link" aria-label="Synchronized-wait-notify的直接链接" title="Synchronized-wait-notify的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 通过的管程等待-通知机制，来获取值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * wait() notify()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class SynchronizedMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private volatile Integer value = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    synchronized public void sum (int num) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value = fibo(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        notifyAll();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if ( a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a-1) + fibo(a-2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    synchronized public int getValue() throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (value == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            wait();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final SynchronizedMethod method = new SynchronizedMethod();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            method.sum(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = method.getValue();// 这是得到的返回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算的结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">异步计算的结果为：1836311903</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">使用时间：5198 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="semaphore">Semaphore<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#semaphore" class="hash-link" aria-label="Semaphore的直接链接" title="Semaphore的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Semaphore 方式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class SemaphoreMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private volatile Integer value = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final Semaphore semaphore = new Semaphore(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void sum(int num) throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.value = fibo(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        semaphore.release();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a - 1) + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int getValue() throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        semaphore.acquire();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result = this.value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        semaphore.release();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final SemaphoreMethod method = new SemaphoreMethod();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        method.semaphore.acquire();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                method.sum(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (InterruptedException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = method.getValue();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算结果为" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 然后退出 main 线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="lock-condition">Lock-Condition<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#lock-condition" class="hash-link" aria-label="Lock-Condition的直接链接" title="Lock-Condition的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class LockConditionMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private volatile Integer value = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Lock lock = new ReentrantLock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Condition calComplete = lock.newCondition();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void sum(int num) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lock.lock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value = fibo(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        calComplete.signal();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lock.unlock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a - 1) + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int getValue() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lock.lock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (value == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                calComplete.await();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (InterruptedException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } finally {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                lock.unlock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final LockConditionMethod method = new LockConditionMethod();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            method.sum(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = method.getValue(); // 这是得到的返回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算的结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">异步计算的结果为：1836311903</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">使用时间：5402 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="cyclicbarrier">CyclicBarrier<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#cyclicbarrier" class="hash-link" aria-label="CyclicBarrier的直接链接" title="CyclicBarrier的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * CyclicBarrierMethod 方式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class CyclicBarrierMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private  volatile Integer value = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    CyclicBarrier barrier;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void setBarrier(CyclicBarrier barrier) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.barrier = barrier;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void sum(int num) throws BrokenBarrierException, InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value = fibo(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(barrier.await());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a-1) + fibo(a-2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int getValue(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final CyclicBarrierMethod method = new CyclicBarrierMethod();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        CyclicBarrier barrier = new CyclicBarrier(1, () -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int result = 0; // 这是得到的反回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result = method.getValue();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 确保拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("异步计算结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("使用时间为：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        method.setBarrier(barrier);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                method.sum(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (BrokenBarrierException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (InterruptedException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 然后退出 main 线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="countdownlatch">CountDownLatch<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#countdownlatch" class="hash-link" aria-label="CountDownLatch的直接链接" title="CountDownLatch的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class CountDownLatchMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private volatile Integer value = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private CountDownLatch latch;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void sum(int num) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value = fibo(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        latch.countDown();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a - 1)  + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int getValue() throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        latch.await();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * latch 没有重置功能，这个函数用来传入新的</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param latch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void setLatch(CountDownLatch latch) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.latch = latch;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        CountDownLatch latch = new CountDownLatch(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final CountDownLatchMethod method = new CountDownLatchMethod();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        method.setLatch(latch);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(() -&gt;{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            method.sum(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = method.getValue(); // 这是得到的返回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保 拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 然后退出 main 线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">异步计算结果为：1836311903</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">使用时间：5318 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用-future使用线程池的-submit">使用 Future（使用线程池的 submit）<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#%E4%BD%BF%E7%94%A8-future%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84-submit" class="hash-link" aria-label="使用 Future（使用线程池的 submit）的直接链接" title="使用 Future（使用线程池的 submit）的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="future">Future<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#future" class="hash-link" aria-label="Future的直接链接" title="Future的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Future</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class FutureMethod implements Callable {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private long sum(int num) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a - 1) + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Object call() throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return sum(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws ExecutionException, InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行 下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExecutorService executorService = Executors.newFixedThreadPool(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Future&lt;Long&gt; future = executorService.submit(new FutureMethod());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long result = future.get(); // 这是得到的返回值i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保 拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + "ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 然后退出 main 线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        executorService.shutdown();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">异步计算结果为：1836311903</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">使用时间：5277ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="futuretask">FutureTask<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#futuretask" class="hash-link" aria-label="FutureTask的直接链接" title="FutureTask的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * FutureTask</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class FutureTaskMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 取结果</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static class Get implements Callable&lt;Integer&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FutureTask&lt;Integer&gt; sum;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public Get(FutureTask&lt;Integer&gt; sum) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.sum = sum;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public Integer call() throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return sum.get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 求结果</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    static class Sum implements Callable&lt;Integer&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public Integer call() throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return fibo(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private int fibo(int a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return fibo(a - 1) + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws ExecutionException, InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FutureTask&lt;Integer&gt; sum = new FutureTask&lt;&gt;(new Sum());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FutureTask&lt;Integer&gt; get = new FutureTask&lt;&gt;(new Get(sum));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread sumT = new Thread(sum);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sumT.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread getT = new Thread(get);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        getT.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = get.get(); // 这是得到的返回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算的结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 然后退出 main 线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>call()</code> 没有输入参数，所以用两个 <code>call()</code> ，一个用来指定固定的输入参数，令一个用来获取结果。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="completablefuture">CompletableFuture<a href="https://solidspoon.xyz/blog/summary-of-thread-collaboration-methods-in-java#completablefuture" class="hash-link" aria-label="CompletableFuture的直接链接" title="CompletableFuture的直接链接">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * CompletableFuture 方式</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class CompleteableMethod {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long start = System.currentTimeMillis();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 在这里创建一个线程或线程池</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 异步执行下面方法</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = CompletableFuture.supplyAsync(() -&gt; sum()).join();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 确保 拿到 result 并输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("异步计算的结果为：" + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static int sum() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(45);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static int fibo(int a){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (a &lt; 2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fibo(a - 1) + fibo(a - 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义 ClassLoader 加载一个加密 class 文件]]></title>
        <id>https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file</id>
        <link href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file"/>
        <updated>2021-03-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[跟着我体验一下传说中非常厉害的类加载器吧！]]></summary>
        <content type="html"><![CDATA[<p>跟着我体验一下传说中非常厉害的类加载器吧！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="制作加密-class">制作加密 class<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%88%B6%E4%BD%9C%E5%8A%A0%E5%AF%86-class" class="hash-link" aria-label="制作加密 class的直接链接" title="制作加密 class的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="目标类">目标类<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E7%9B%AE%E6%A0%87%E7%B1%BB" class="hash-link" aria-label="目标类的直接链接" title="目标类的直接链接">​</a></h3>
<p>我们要加载的类很简单，它只有一个 <code>hello()</code> 方法。编译这个类生成 class 文件，待会要用</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package ClassLoader;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Hello {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void hello(){ </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello, classLoader!"); </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="加密">加密<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%8A%A0%E5%AF%86" class="hash-link" aria-label="加密的直接链接" title="加密�的直接链接">​</a></h3>
<p>下面这段代码读取了刚才生成的 Hello.class ，加密之后保存为 Hello.xlass</p>
<p><code>encode()</code> 实现了一个简单的加密，加载类的时候使用同样的方法就可以解密</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package ClassLoader;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.File;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileInputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileOutputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.IOException;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @author : solidSpoon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @date : 2021/3/5 1:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class EncodeFile {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String name = "Hello";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        EncodeFile ef = new EncodeFile();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        byte[] fileByteArray = ef.loadFile(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fileByteArray = ef.encode(fileByteArray);;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ef.storeFile(fileByteArray, name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public byte[] loadFile(String name){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        File f = new File(this.getClass().getResource(name + ".class").getPath());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        byte[] fileByteArray = new byte[(int)f.length()];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new FileInputStream(f).read(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fileByteArray;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void storeFile(byte[] fileByteArray, String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String p = this.getClass().getResource("").getPath();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        File file = new File(p + "/" + name + ".xlass");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try (FileOutputStream fop = new FileOutputStream(file)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (!file.exists()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                file.createNewFile();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fop.write(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fop.flush();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public byte[] encode (byte[] fileToEncode){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i=0; i&lt; fileToEncode.length; i++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fileToEncode[i] = (byte) (255 - fileToEncode[i]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fileToEncode;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="加载">加载<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%8A%A0%E8%BD%BD" class="hash-link" aria-label="加载的直接链接" title="加载的直接链接">​</a></h2>
<p>接下来我们定义自己的加载器，把刚才的 xlass 文件解密之后加载到 JVM 中，并反射运行它的 <code>hello()</code> 方法。</p>
<p>具体方法是继承 <code>ClassLoader</code> 类，覆盖它的 <code>findClass()</code> 方法，在该方法中使用 <code>defineClass()</code> 将字节流转成 <code>Class</code></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package ClassLoader;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.File;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileInputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.lang.reflect.Method;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @author : solidSpoon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @date : 2021/3/5 1:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MyClassLoader extends ClassLoader{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Class&lt;?&gt; clazz = new  MyClassLoader().findClass("Hello");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Object obj = clazz.getConstructor().newInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Method method = clazz.getMethod("hello");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            method.invoke(obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        File f = new File(this.getClass().getResource(name + ".xlass").getPath());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        byte[] fileByteArray = new byte[(int)f.length()];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new FileInputStream(f).read(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fileByteArray = decode(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String pack = this.getClass().getPackage().getName();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return defineClass(pack + "." + name, fileByteArray, 0, fileByteArray.length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 将编码过的字节数组解码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param fileToDecode 要解码的字节数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @return 解码的字节数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public byte[] decode (byte[] fileToDecode){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i=0; i&lt; fileToDecode.length; i++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fileToDecode[i] = (byte) (255 - fileToDecode[i]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fileToDecode;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="运行结果">运行结果<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="运行结果的直接链接" title="运行结果的直接链接">​</a></h2>
<p>我们的类加载器解密了 xlass 并将它加载到了 JVM 中</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Hello, classLoader!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="原理">原理<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%8E%9F%E7%90%86" class="hash-link" aria-label="原理的直接链接" title="原理的直接链接">​</a></h2>
<p>类加载的原则是双亲委派模型：如果一个类加载器收到了类加载的请求，它首先会把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>
<p>我们定义的这个 <code>findClass()</code> 方法会在下面这个地方调用，如代码所示，如果该类还没有被加载并且父加载器无法加载个类（当然肯定不能加载），就会调用我们定义的 <code>findClass()</code> 去加载这个类</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// java.lang ClassLoader</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throws ClassNotFoundException</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        synchronized (getClassLoadingLock(name)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // First, check if the class has already been loaded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Class&lt;?&gt; c = findLoadedClass(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (c == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long t0 = System.nanoTime();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    if (parent != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        c = parent.loadClass(name, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        c = findBootstrapClassOrNull(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                } catch (ClassNotFoundException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // ClassNotFoundException thrown if class not found</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // from the non-null parent class loader</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (c == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // If still not found, then invoke findClass in order</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // to find the class.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    long t1 = System.nanoTime();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    c = findClass(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // this is the defining class loader; record the stats</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    PerfCounter.getFindClasses().increment();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (resolve) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                resolveClass(c);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return c;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="Java" term="Java"/>
        <category label="JVM" term="JVM"/>
        <category label="类加载器" term="类加载器"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[手把手教你读一个 Java 文件的字节码]]></title>
        <id>https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file</id>
        <link href="https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file"/>
        <updated>2021-03-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[想要读懂 Java 的字节码其实没那么难。当然，如果你有汇编语言的经验就会更好上手。本文手把手教你阅读一个简单 Java 文件的字节码。]]></summary>
        <content type="html"><![CDATA[<p>想要读懂 Java 的字节码其实没那么难。当然，如果你有汇编语言的经验就会更好上手。本文手把手教你阅读一个简单 Java 文件的字节码。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何得到字节码">如何得到字节码？<a href="https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file#%E5%A6%82%E4%BD%95%E5%BE%97%E5%88%B0%E5%AD%97%E8%8A%82%E7%A0%81" class="hash-link" aria-label="如何得到字节码？的直接链接" title="如何得到字节码？的直接链接">​</a></h2>
<p>以下面这段示例代码为例，他存放在一个包中：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package demo.a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class B{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通过下面这几个方法就可以查看代码的字节码：</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="方法-1-命令行">方法 1 、命令行<a href="https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file#%E6%96%B9%E6%B3%95-1-%E5%91%BD%E4%BB%A4%E8%A1%8C" class="hash-link" aria-label="方法 1 、命令行的直接链接" title="方法 1 、命令行的直接链接">​</a></h3>
<p>相关命令如下</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">javac demo/a/B.java // 编译</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jvavp -c demo.a.B   // 输出字节码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">javap -c -verbose demo.a.B // 详细输出</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="方法-2-idea-插件">方法 2 、idea 插件<a href="https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file#%E6%96%B9%E6%B3%95-2-idea-%E6%8F%92%E4%BB%B6" class="hash-link" aria-label="方法 2 、idea 插件的直接链接" title="方法 2 、idea 插件的直接链接">​</a></h3>
<p>下载个插件：「jclasslib Bytecode Viewer」，网址如下</p>
<blockquote>
<p><a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a></p>
</blockquote>
<p>安装该插件后，首先编译代码，然后
菜单 👉 「view」 👉 「Show Bytecode With jclasslib」
结果如下：
<img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210402103711.png" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="实验代码">实验代码<a href="https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file#%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="实验代码的直接链接" title="实验代码的直接链接">​</a></h2>
<p>我们使用下面这段代码，你可以将其输入 IDE 中</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.ArrayList;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Hello {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num1 = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num2 = 130;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num3 = num1 + num2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num4 = num2 - num1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num5 = num1 * num2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num6 = num2 / num1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final int num7 = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Integer num88 = 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        //看装箱指令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(num88 == 0){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; nums = new ArrayList&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums.add(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums.add(2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int num : nums){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (nums.size() == num2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>下面是由 idea 反编译得到的代码，可以观察到 <code>for</code> 循环被改成了 <code>while</code></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">//</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Source code recreated from a .class file by IntelliJ IDEA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// (powered by FernFlower decompiler)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.ArrayList;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.Iterator;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Hello {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Hello() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num1 = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num2 = 130;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int var10000 = num1 + num2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var10000 = num2 - num1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var10000 = num1 * num2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var10000 = num2 / num1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num7 = true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Integer num88 = 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (num88 == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; nums = new ArrayList();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums.add(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums.add(2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Iterator var10 = nums.iterator();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while(var10.hasNext()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int num = (Integer)var10.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (nums.size() == num2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="阅读字节码">阅读字节码<a href="https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file#%E9%98%85%E8%AF%BB%E5%AD%97%E8%8A%82%E7%A0%81" class="hash-link" aria-label="阅读字节码的直接链接" title="阅读字节码的直接链接">​</a></h2>
<p>为了方便解释，我将字节码文件拆成小段，首先使用下面这个命令输出字节码</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">PS C:\Users\cedar\Desktop\ReadBytecode\code\target\classes&gt; javap -c .\Hello.class</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>一开始就说明了这是「Hello.java」的字节码</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Compiled from "Hello.java"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Hello {</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>紧接着自动创建了无参构造方法，调用了父类 <code>Object</code> 的初始化函数。 <code>aload_0</code> 是说把本地变亮表位置 0 的对象加载出来，而这个位置保存的是对自身的引用。</p>
<p>你会发现字节码每条命令前面也有一个数字，比如 <code>0: aload_0</code> 前面有一个 <code>0</code> ，它代表 <code>aload_0</code> 这条指令在第 0 个位置。接着观察 <code>4: return</code>，它的位置怎么突然变成 4 了？那是因为 <code>invokespecial</code> 这个指令还有两个输入参数，一共占用三个字节</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-- 字节码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> public Hello();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Code:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       0: aload_0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       4: return</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>1: invokespecial #1</code> 的 <code>#1</code>，代表常量池位置 1.常量池通过 <code>javap -c -verbose demo.a.B</code> 就可以显示出来，如下所示</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Constant pool:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   #1 = Methodref          #15.#48        // java/lang/Object."&lt;init&gt;":()V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   #2 = Methodref          #12.#49        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   #3 = Methodref          #12.#50        // java/lang/Integer.intValue:()I</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ......</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>接下来就是 <code>main</code> 方法了，还记得我们在 <code>main</code> 方法中干了什么吗</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 源码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num1 = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num2 = 130;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num3 = num1 + num2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num4 = num2 - num1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num5 = num1 * num2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num6 = num2 / num1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        final int num7 = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Integer num88 = 6;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>它对应的字节码是下面这样的，具体内容我已经标注出来了，稍微解释一下 <code>iconst_1</code> ，代表常量 <code>int 1</code> ，也就是代码中有个常量 「1」加载到栈顶</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  public static void main(java.lang.String[]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Code:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- 初始化 num1 = 1;保存到变量表 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       0: iconst_1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       1: istore_1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- 初始化 num2 = 130; 保存到 变量表2，以下同理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       2: sipush        130</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       5: istore_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- 计算 num3(匿名了) = num1 + num2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       6: iload_1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       7: iload_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       8: iadd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       9: istore_3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- 计算 num4(匿名了) = num2 - num1;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      10: iload_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      11: iload_1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      12: isub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      13: istore        4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- 计算 num5(匿名了) = num1 * num2; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      15: iload_1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      16: iload_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      17: imul</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      18: istore        5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- 计算 num6(匿名了) = num2 / num1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      20: iload_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      21: iload_1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      22: idiv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      23: istore        6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- final int num7 = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      25: iconst_5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      26: istore        7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- Integer num88 = 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      28: bipush        6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      30: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      33: astore        8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>然后是这个 <code>if</code> 语句</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        if (num88 == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意上文 <code>num88</code> 被保存到变量表位置 8，所以此处把位置 8 加载出来</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-- 字节码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      35: aload         8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      37: invokevirtual #3                  // Method java/lang/Integer.intValue:()I</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      40: ifne          50 -- 如果不等于 0 就跳转到 50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      43: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      46: iload_1          -- 存储 num1 的地方</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      47: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>然后我们操作了一个 <code>List</code></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 源码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; nums = new ArrayList&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums.add(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums.add(2);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    -- 初始化 List 对象</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      50: new           #6                  // class java/util/ArrayList</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      53: dup              -- 把栈顶的值复制一份再压回去，此时栈顶有两份一样的值，分别被 54 和 57 指令消耗了</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      54: invokespecial #7                  // Method java/util/ArrayList."&lt;init&gt;":()V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      57: astore        9 -- 将初始化的对象存到寄存器 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- list -&gt; add(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      59: aload         9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      61: iconst_1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      62: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      65: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      70: pop           -- 丢弃了 add 返回值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- list -&gt; add(2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      71: aload         9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      73: iconst_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      74: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      77: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      82: pop           -- 丢弃了 add 返回值</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>遍历 <code>List</code> ，这里 JVM 把 <code>for</code> 改成了 <code>while</code></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 源代码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (int num : nums){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//被 JVM 该成如下代码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Iterator var10 = nums.iterator();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while(var11.hasNext()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int num = (Integer)var11.next();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    -- 获取迭代器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      83: aload         9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      85: invokeinterface #9,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      90: astore        10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      92: aload         10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      94: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      99: ifeq          128 -- 如果等于 0，跳转到 128</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -- 获取 next() 并打印</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     102: aload         10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     104: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     109: checkcast     #12                 // class java/lang/Integer  -- 检查对象是否为给定类型</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     112: invokevirtual #3                  // Method java/lang/Integer.intValue:()I</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     115: istore        11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     117: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     120: iload         11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     122: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     125: goto          92</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>最后我们写了个 if</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 源码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (nums.size() == num2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(num2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    -- 如果 list.size() == num2; 打印 num2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     128: aload         9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     130: invokeinterface #13,  1           // InterfaceMethod java/util/List.size:()I</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     135: iload_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     136: if_icmpne     146</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     139: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     142: iload_2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     143: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     146: return</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="小结">小结<a href="https://solidspoon.xyz/blog/step-by-step-guide-to-reading-bytecode-of-a-java-file#%E5%B0%8F%E7%BB%93" class="hash-link" aria-label="小结的直接链接" title="小结的直接链接">​</a></h2>
<p>Java 的字节码还是要比汇编简单一些。</p>
<p>这里再提一点，当要初始化一个 int 时（在 JVM 中：bool，byte，char，short 都是 int），根据不同的数字所占的位数不同，分别需要如下几个命令，方括号中给出了命令适用的范围</p>
<ul>
<li>iconst: [-1, 5]</li>
<li>bipush: [-128, 127]</li>
<li>sipush: [-32768, 32767]</li>
<li>idc: any int value</li>
</ul>
<hr>
<ul>
<li><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html" target="_blank" rel="noopener noreferrer">https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html</a></li>
</ul>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="字节码" term="字节码"/>
        <category label="Java" term="Java"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[初识 JShell]]></title>
        <id>https://solidspoon.xyz/blog/getting-started-with-jshell</id>
        <link href="https://solidspoon.xyz/blog/getting-started-with-jshell"/>
        <updated>2021-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[初识 JShell]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="初识-jshell">初识 JShell<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E5%88%9D%E8%AF%86-jshell" class="hash-link" aria-label="初识 JShell的直接链接" title="初识 JShell的直接链接">​</a></h2>
<p>升级到 Java 11 后，有了 JShell 这个工具（其实 Java 9 就有了），它让 Java 可以像脚本语言一样直接在命令行交互，听起来好神奇，快来体验一下！！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="启动与退出">启动与退出<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E5%90%AF%E5%8A%A8%E4%B8%8E%E9%80%80%E5%87%BA" class="hash-link" aria-label="启动与退出的直接链接" title="启动与退出的直接链接">​</a></h2>
<p>保险起见，得先弄明白启动与退出</p>
<p>直接在命令行输入 <code>jshell</code> 就启动了</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar jshell</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  Welcome to JShell -- Version 11.0.9.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  For an introduction type: /help intro</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>退出方式稍微有一些特别，命令是 <code>/exit</code></p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  Goodbye</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>jshell -h</code> 可以发现提供了几个选项，这仨比较有意思</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    -q                    Quiet feedback.  Same as: --feedback concise</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -s                    Really quiet feedback.  Same as: --feedback silent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -v                    Verbose feedback.  Same as: --feedback verbose</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>试了一下 <code>-s</code> 非常安静的反馈，看起来真的清爽</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar jshell -s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; int a = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-&gt; int b = 2;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>初学者还是别整这么安静了，使用 <code>-v</code> 开启详细反馈吧</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar jshell -v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  Welcome to JShell -- Version 11.0.9.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  For an introduction type: /help intro</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="简单使用">简单使用<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8" class="hash-link" aria-label="简单使用的直接链接" title="简单使用的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="变量赋值">变量赋值<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC" class="hash-link" aria-label="变量赋值的直接链接" title="变量赋值的直接链接">​</a></h3>
<p>赋几个值看看</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; int a = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a ==&gt; 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  created variable a : int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; a + 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$2 ==&gt; 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  created scratch variable $2 : int</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; $2 + a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$3 ==&gt; 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  created scratch variable $3 : int</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>可见：没有指定变量的数字会自动赋值给临时变量，我们也可以使用这个临时变量</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="方法与类">方法与类<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E6%96%B9%E6%B3%95%E4%B8%8E%E7%B1%BB" class="hash-link" aria-label="方法与类的直接链接" title="方法与类的直接链接">​</a></h3>
<p>那创建方法呢？</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; String addMark(Word word) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ...&gt; return word.val + "!";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ...&gt; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  created method addMark(Word), however, it cannot be referenced until class Word is declared</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里方法传入了一个不存在的类，他告诉我们要定义这个类才能使用这个方法，那定义一下吧</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; class Word {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ...&gt; String val;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ...&gt; public Word() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ...&gt; val = "hello word";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ...&gt; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ...&gt; }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  created class Word</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    update replaced method addMark(Word)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>创建个对象调用一下</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; Word words = new Word()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">words ==&gt; Word@2ef1e4fa</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  created variable words : Word</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; addMark(words)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$4 ==&gt; "hello word!"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  created scratch variable $4 : String</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="内置命令">内置命令<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4" class="hash-link" aria-label="内置命令的直接链接" title="内置命令的直接链接">​</a></h3>
<p>输入 <code>/help</code> 就能看到所有可以使用的命令，例如列出所有变量</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /vars</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    Word words = Word@2ef1e4fa</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    String $4 = "hello word!"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="外部编辑器">外部编辑器<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E5%A4%96%E9%83%A8%E7%BC%96%E8%BE%91%E5%99%A8" class="hash-link" aria-label="外部编辑器的直接链接" title="外部编辑器的直接链接">​</a></h2>
<p>有没有觉得在命令行定义类或者方法啥的太费事了，其实 JShell 支持使用编辑器</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用默认编辑器">使用默认编辑器<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E7%BC%96%E8%BE%91%E5%99%A8" class="hash-link" aria-label="使用默认编辑器的直接链接" title="使用默认编辑器的直接链接">​</a></h3>
<p>先定义一个类</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; class Friend{}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  已创建 类 Friend</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>调用自带的编辑器</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /edit Friend</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如下图，点击 Accept 就行</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223013703.png" alt="img" class="img_ev3q"></p>
<p>注意一定是之前定义好的片段，如下：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   1 : int a = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   2 : int b = 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   3 : int c = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   6 : class Friend{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       String val = "No Friend !!!";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>否则会报错</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /edit Dog</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  没有此类片段: Dog</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="自定义编辑器">自定义编辑器<a href="https://solidspoon.xyz/blog/getting-started-with-jshell#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8" class="hash-link" aria-label="自定义编辑器的直接链接" title="自定义编辑器的直接链接">​</a></h3>
<p>如果想自定义编辑器呢，自带的太不好用</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /set editor vim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  编辑器设置为: vim</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /set editor "C:\\Users\\cedar\\AppData\\Local\\Programs\\Microsoft VS Code\\code" -w</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  编辑器设置为: C:\Users\cedar\AppData\Local\Programs\Microsoft VS Code\code -w</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>该 <code>-w</code> 选项设置等待文件关闭后再返回</p>
<p>上述设置是一次性的，想永久设置的话，使用 <code>-retain</code> 选项</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jshell&gt; /set editor -retain vim</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="Java" term="Java"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PhotoShop 图层的混合模式是怎么回事]]></title>
        <id>https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers”</id>
        <link href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers”"/>
        <updated>2021-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E5%89%8D%E8%A8%80" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h2>
<p>在修图软件中，调整混合模式就可以将两张照片用不同的风格混合在一起</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223210643.gif" alt="" class="img_ev3q"></p>
<p>上图就是将下面这两个图片用不同的混合模式叠加的效果，那么你有没有想过这是什么原理呢？本文就以几个经典的混合模式为例简单研究一下。</p>
<table><tbody><tr><td><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223210706.png" width="100%"></td><td><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223210720.png" width="100%"></td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="图像显示原理">图像显示原理<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86" class="hash-link" aria-label="图像显示原理的直接链接" title="图像显示原理的直接链接">​</a></h2>
<p>其实各种图层混合模式的灵感就是来源于胶片相机时代。那个时代的摄影师没有先进的计算机来修图，只能拍好胶片后（当然也有其他的感光材料做底片），在暗房通过各种骚操作来给自己的照片添加「特效」，其中很多方法在数字时代就演变成了修图软件中的混合模式。</p>
<p>在修图软件中，图层就是一张张胶片叠在一起，而混合模式就是胶片与胶片之间的药水，不同的药水会让胶片之间产生不同的混合效果。当然要彻底理解修图软件的混合模式就必须得了解 RGB 色彩模型，因为这是混合模式的根基。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="yes-rgb">YES!!! RGB!!<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#yes-rgb" class="hash-link" aria-label="YES!!! RGB!!的直接链接" title="YES!!! RGB!!的直接链接">​</a></h3>
<p>有谁能不喜欢 RGB 呢。课本上都讲过，光的三原色是红绿蓝，将这三种颜色按照不同的强度和不同的比例混合之后，就可以得到其他的颜色。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211659.png" alt="" class="img_ev3q"></p>
<p>计算机也是这样。在计算机中，红绿蓝的比例可以由一组在 [0 - 255] 之间的数据表示，数字越大对应颜色光强越大。就像下图这样，比如我们想显示纯红色，那就让红色的发光强度最大，绿色和蓝色不发光，因此红色就表示为 <code>RGB(255, 0, 0)</code></p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211735.png" alt="" class="img_ev3q"></p>
<p>如果想显示黄色呢？根据上面的三原色图，只需要让蓝色不发光，红色和绿色发光强度最大，就得到了黄色，</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211803.png" alt="" class="img_ev3q"></p>
<p>如果让三种颜色第比例相同，那就变成了黑白灰。神奇吧，黑白灰的三原色比例相同，只是发光强度不同。从这个角度看，黑白灰其实是一种颜色，只是亮度不同。所以就不难理解如果想看到真正的「白色」，就必须拼命提高亮度，这也是我们希望显示器亮度更高的原因之一。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211815.png" alt="" class="img_ev3q"></p>
<p>当我们把上面的那些颜色块做的非常小，就变成了显示器中像素点。每个都是由红绿蓝三原色组成的，使用程序控制每个像素点的三原色比例，就显示出了不同的图案。下图就是显示器放大的样子。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211825.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="修图就是计算">修图就是计算<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E4%BF%AE%E5%9B%BE%E5%B0%B1%E6%98%AF%E8%AE%A1%E7%AE%97" class="hash-link" aria-label="修图就是计算的直接链接" title="修图就是计算的直接链接">​</a></h3>
<p>到这，你一定能理解，修图软件中的所有操作就是对每个像素点的 RGB 值做计算，比如想要提高一张照片的曝光，那就同时提高每个像素的 RGB 值，这样照片就会变得明亮。如果想提高对比度，那就让较亮的地方的 RGB 更大，较暗的地方 RGB 更小，如下图：</p>
<table><tbody><tr><td><p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212000.png" alt="" class="img_ev3q"></p></td><td><p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212013.png" alt="" class="img_ev3q"></p></td></tr></tbody></table>
<blockquote>
<p>对比度低的照片各像素点的 RGB 值都比较居中，提高对比度后，RGB 值较低（暗）和 RGB 值较高（亮）的像素点变多了。</p>
</blockquote>
<p>混合模式也是这个原理，既然是混合，那就得有两个或两个以上的对象。在修图软件中，这样的对象就以图层为载体，我们将两个图层叠放到一起的时候，就会有一个上下对应的关系。上层的一个像素点会对应到下层的一个像素点，混合模式就是对这一组组像素点进行计算。</p>
<p>那么常见的混合模式是怎么计算像素点的呢？</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="计算方法">计算方法<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95" class="hash-link" aria-label="计算方法的直接链接" title="计算方法的直接链接">​</a></h2>
<p>为了计算两张照片的混合，首先要将个像素点 [0 - 255] 的值映射到 [0.00 - 1.00] 的小数区间，比如：</p>
<ul>
<li>0 = 0.00；</li>
<li>128 = 0.50；</li>
<li>256 = 1.00</li>
</ul>
<p>也就是每个像素点的三原色值变成了三个小数，这么处理了之后，就比较好计算，那先来两个简单的练练手</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="变亮和变暗">「变亮」和「变暗」<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E5%8F%98%E4%BA%AE%E5%92%8C%E5%8F%98%E6%9A%97" class="hash-link" aria-label="「变亮」和「变暗」的直接链接" title="「变亮」和「变暗」的直接链接">​</a></h3>
<p>这俩操作的公式很简单，分别对比两个像素点的 RGB，变亮就是取大值，变暗就是取小值。</p>
<p>比如有两个像素点：<code>a [84, 164, 109]</code>，<code>b [136, 100, 149]</code></p>
<ul>
<li>变亮：<code>c [136, 164, 149]</code></li>
<li>变暗：<code>c [84, 100, 109]</code></li>
</ul>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212124.png" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="正片叠底-multiply">正片叠底 Multiply<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E6%AD%A3%E7%89%87%E5%8F%A0%E5%BA%95-multiply" class="hash-link" aria-label="正片叠底 Multiply的直接链接" title="正片叠底 Multiply的直接链接">​</a></h3>
<p>什么是正片呢？</p>
<blockquote>
<p>正片（英语：Positive Film）为<a href="https://zh.wikipedia.org/wiki/%E5%BA%95%E7%89%87" target="_blank" rel="noopener noreferrer">底片</a>的分类标准之一，胶片功能类似相纸，利用<a href="https://zh.wikipedia.org/wiki/%E8%B2%A0%E7%89%87" target="_blank" rel="noopener noreferrer">负片</a>冲印得到正像显影，但不像负片和反转片是摄影胶片；由于以反转冲洗法（Reversal Process）的反转片（Reversal film）亦采正像显影方式<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87#cite_note-1" target="_blank" rel="noopener noreferrer">[1]</a><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87#cite_note-2" target="_blank" rel="noopener noreferrer">[2]</a>，“正片”遂成与负片相对的感光材料总称，可供<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%96%93%E6%AD%A3%E7%89%87" target="_blank" rel="noopener noreferrer">影片拷贝</a>、<a href="https://zh.wikipedia.org/wiki/%E5%B9%BB%E7%87%88%E6%A9%9F" target="_blank" rel="noopener noreferrer">幻灯机</a>及灯箱观赏等用途上，也可印制照片、印刷制版。
<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87</a></p>
</blockquote>
<p>可见，正片上的色彩就是图像真实的色彩</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212157.jpeg" alt="" class="img_ev3q"></p>
<blockquote>
<p><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fzh-cn.facebook.com%2Fhi.xikon%2Fposts%2F279712775851997%2F&amp;psig=AOvVaw1f4r21n5CgNHNQKHowqq5b&amp;ust=1614155052538000&amp;source=images&amp;cd=vfe&amp;ved=2ahUKEwi_8LWlyv_uAhXPCIgKHRkvCTIQjB16BAgAEAg" target="_blank" rel="noopener noreferrer">图片来源</a></p>
</blockquote>
<p>那正片叠底就是把两个正片叠上，由于正片亮的地方是透明的，暗的地方是不透明的，叠上之后透明的地方就会显示出另一张正片的图案。</p>
<p>典型示例如下图，上层图层是一个白色背景的水印，下层图层是一个风筝图片，它俩应用正片叠底之后水印的白色背景消失了。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212214.png" alt="" class="img_ev3q"></p>
<p>正片叠底的英文是 Mutiply，跟它的名字一样，用公式表示就是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><mi>a</mi><mo>×</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">c=a \times b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6944em"></span><span class="mord mathnormal">b</span></span></span></span></p>
<p>如果刚才那个扣水印的原理你没有看明白，那就用公式解释一下：白色的值是 1，如果 a 是白色，那么混合之后的结果就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mi>b</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">1 \times b=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6944em"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6944em"></span><span class="mord mathnormal">b</span></span></span></span>，因此水印白色背景被扣掉了。</p>
<p>如果自己跟自己做正片叠底呢？
那公式就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">c = a ^ 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8141em"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em"><span style="top:-3.063em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<p>图像如下，可见整体变暗了一些，亮度低的地方透明度低，变暗的幅度就比较大。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212230.png" alt="" class="img_ev3q"></p>
<p>理论上，如果你能在曲线工具中调出一个标准的二次曲线，那它俩效果就是一样的！</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212253.jpeg" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="滤色-screen">滤色 Screen<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E6%BB%A4%E8%89%B2-screen" class="hash-link" aria-label="滤色 Screen的直接链接" title="滤色 Screen的直接链接">​</a></h3>
<p>正片叠底是堆叠正片，滤色就是堆叠负片，负片就是正片颜色取反。较暗的场景在负片中变得较亮，较亮就意味着透明，叠上之后透明的地方就会显示出另一张负片的图案。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212317.jpeg" alt="" class="img_ev3q"></p>
<p>因此如果我们把水印的背景换成黑色，文字换成白色，它俩做滤色，就会得到白色的水印</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212335.png" alt="" class="img_ev3q"></p>
<p>公式是这样：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mn>1</mn><mo>−</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo>×</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">C = 1-\left(1-a\right)\times\left(1-b\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="minner"><span class="mopen delimcenter" style="top:0em">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em">)</span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="minner"><span class="mopen delimcenter" style="top:0em">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em">)</span></span></span></span></span>
也很好理解：(1 - a) 和 (1 - b) 代表 a 和 b 的负片，它俩做堆叠（乘法），最后再冲洗成正片（1 - x）</p>
<p>自己叠底自己效果如下曲线</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><mn>1</mn><mo>−</mo><msup><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">c=1-\left(1-a\right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1.204em;vertical-align:-0.25em"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954em"><span style="top:-3.2029em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212357.png" alt="" class="img_ev3q"></p>
<p>可见整体偏亮了，同样可以用曲线工具模拟出来：</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212412.jpeg" alt="" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="叠加-overlay">叠加 Overlay<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E5%8F%A0%E5%8A%A0-overlay" class="hash-link" aria-label="叠加 Overlay的直接链接" title="叠加 Overlay的直接链接">​</a></h3>
<p>叠加模式是「正片叠底」和「滤色」的混合模式，是个分段函数。它的公式如下：</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mi>a</mi><mi>b</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>&nbsp;if&nbsp;</mtext><mi>a</mi><mo>&lt;</mo><mn>0.5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>&nbsp;otherwise&nbsp;</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">{f(a, b)}=\left\{\begin{array}{ll}2 a b, &amp; \text { if } a&lt;0.5 \\ 1-2(1-a)(1-b), &amp; \text { otherwise }\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em">f</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em"></span><span class="minner"><span class="mopen delimcenter" style="top:0em"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">ab</span><span class="mpunct">,</span></span></span><span style="top:-2.41em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em"></span><span class="arraycolsep" style="width:0.5em"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em"><span style="top:-3.61em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord text"><span class="mord">&nbsp;if&nbsp;</span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mord">0.5</span></span></span><span style="top:-2.41em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord text"><span class="mord">&nbsp;otherwise&nbsp;</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
<p>其中，a 是<strong>底下的图层</strong>，b 是上面的图层，就是说</p>
<ul>
<li>当下面像素比较暗的时候，效果相当于两倍正片叠底，导致整体变暗</li>
<li>当下面像素比较亮的时候，效果相当于两倍滤色，导致整体变亮</li>
</ul>
<p>注意观察公式：当其中一个像素某个值是 0.5 的时候（a = 0.5 或 b = 0.5），另一个像素对应值相当于没变。如果我们拿一个红绿蓝的亮度都是 0.5 的图片，也就是<code>RGB(128,128,128)</code> 和另一个图片做叠加，这个颜色就消失了，再扣个水印试试。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212427.jpeg" alt="" class="img_ev3q"></p>
<p>把水印放在<strong>下层</strong>，在上层应用「叠加」效果，<code>RGB(128,128,128)</code> 就被扣掉了，我来解释一下：</p>
<ul>
<li>白色水印部分比较亮，应用的是两倍滤色，前面说滤色会保留白色，因此白色被保留了下来</li>
<li>黑色水印部分比较暗，应用的是两倍正片叠底，前面说正片叠底会保留黑色，因此黑色被保留了下来</li>
</ul>
<p><code>RGB(128,128,128)</code> 这个颜色叫做中性灰。也就是叠加模式可以扣掉中性灰，这里引申一点，常见的「中性灰修图法」原理就是上面列出的这几点，有兴趣可以去查一下。</p>
<p>那叠加公式这个「两倍」是干嘛的，你说「叠加」是结合了「正片叠底」和「滤色」，那为什么不直接结合，非要弄个两倍呢？</p>
<p>看一下图像就知道了，由于三维图不好展示，这里还是压缩成二维，也就是自己叠加自己，如果不加两倍直接结合的话会怎么样呢？</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212442.png" alt="" class="img_ev3q"></p>
<p>两条曲线在 x = 0.5 处根本就是不连续的嘛，这怎么能行呢，所以加上两倍是为了让它俩的图像连续，就下面这样</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212500.png" alt="" class="img_ev3q">
去掉多余的线条，就是下面这个，是一个增加对比度的曲线：</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212527.png" alt="" class="img_ev3q"></p>
<p>注意上面这个曲线是自己叠加自己的情况，看起来还是可以用曲线工具模拟出来</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210319193823.jpeg" alt="" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="https://solidspoon.xyz/blog/understanding-blending-modes-in-photoshop-layers%E2%80%9D#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2>
<p>图层的混合模式分为几种，就像曲线一样，有的应用了之后会让整体变亮，有的会让整体变暗，有的会增加对比度。</p>
<ul>
<li>「正片叠底」就是一种变暗的模式，混合后最暗的黑色会被保留下来，最亮的白色会被丢弃。</li>
<li>「滤色」是一种变亮的模式，混合之后最亮的白色会被保留下来，最暗的黑色会被丢弃。</li>
<li>「叠加」是一种增加对比度的模式，它是「正片叠底」和「滤色」的结合体，会扣去中性灰。</li>
</ul>
<p>混合模式还有很多，但只是函数的曲线略有差别，但是他们的函数复杂，因此就不展开了。如果你有兴趣可以去维基百科上看看</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Blend_modes" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Blend_modes</a></p>
</blockquote>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 诊断神器 BusyBox]]></title>
        <id>https://solidspoon.xyz/blog/docker-diagnostic-tool-busybox</id>
        <link href="https://solidspoon.xyz/blog/docker-diagnostic-tool-busybox"/>
        <updated>2021-02-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、telnet 、ping、ifconfig 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、telnet 、ping、ifconfig 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。</p>
</blockquote>
<p>BusyBox 容器镜像可以帮助我们快速测试容器网络</p>
<p>直接运行并进入命令行：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run --name &lt;my-docker-name&gt; -it --rm busybox sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>--rm</code>&nbsp;参数可以让我们在退出容器时自动销毁该容器</p>
<p>创建时指定网络</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run -it --rm --name &lt;my-docker-name&gt; --network &lt;my-net&gt; busybox sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>将一个容器连接到网络</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network connect &lt;my-net&gt; &lt;my-docker-name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>将容器从网络断开</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network disconnect &lt;my-net&gt; &lt;my-docker-name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="Docker" term="Docker"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 网络设置]]></title>
        <id>https://solidspoon.xyz/blog/docker-network-configuration</id>
        <link href="https://solidspoon.xyz/blog/docker-network-configuration"/>
        <updated>2021-02-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[这里列出 Docker 配置网络的常用命令]]></summary>
        <content type="html"><![CDATA[<p>这里列出 Docker 配置网络的常用命令</p>
<blockquote>
<ul>
<li>docker network create</li>
<li>docker network connect</li>
<li>docker network ls</li>
<li>docker network rm</li>
<li>docker network disconnect</li>
<li>docker network inspect</li>
</ul>
</blockquote>
<p>列出所有网络</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network ls</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>创建网络</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network create &lt;my-net&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>查看网络信息</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network inspect &lt;my-net&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>查看容器的信息</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network inspect &lt;my-docker-name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>将一个容器连接到网络</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network connect &lt;my-net&gt; &lt;my-docker-name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>创建容器时就指定网络，以 busybox 为例</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run -it --rm --name busybox1 --network &lt;my-net&gt; busybox sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>给容器在指定网络中起一个别名，网络中的容器可以通过别名访问</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run --net &lt;my-net&gt; -itd --name &lt;my-docker-name&gt; --net-alias &lt;alias-name&gt; busybox</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>多个容器起一个别名时第一个起的有效，第一个下线后第二个有效</p>
<p>将容器从网络断开</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network disconnect &lt;my-net&gt; &lt;my-docker-name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>删除创建的网络</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network rm &lt;my-net&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>需要保证该网络没有容器链接</p>
<hr>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/gezhonglei2007/article/details/51627821" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/gezhonglei2007/article/details/51627821</a></li>
<li><a href="https://www.cnkirito.moe/docker-network-bridge/" target="_blank" rel="noopener noreferrer">https://www.cnkirito.moe/docker-network-bridge/</a></li>
</ul>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="Docker" term="Docker"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[配置 WSL2 使用 Windows 代理上网]]></title>
        <id>https://solidspoon.xyz/blog/configuring-wsl2-to-use-windows-proxy-for-internet-access</id>
        <link href="https://solidspoon.xyz/blog/configuring-wsl2-to-use-windows-proxy-for-internet-access"/>
        <updated>2021-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[WSL 2 配置代理]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wsl-2-配置代理">WSL 2 配置代理<a href="https://solidspoon.xyz/blog/configuring-wsl2-to-use-windows-proxy-for-internet-access#wsl-2-%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86" class="hash-link" aria-label="WSL 2 配置代理的直接链接" title="WSL 2 配置代理的直接链接">​</a></h2>
<p>在 Windows 上设置好代理，连上了谷歌开开心心，但是 WSL 2 不能共享 Windows 的代理策略，如果在 WSL 上再装一个代理软件那可太麻烦了，所以得想想办法。</p>
<p>其实办法还挺简单的，可能有的同学不知道，在一个局域网下如果有一台机器配置好了代理，那么这个代理是可以共享给这个局域网下的其他设备的，比较类似软路由哈！</p>
<p>具体方法如下：</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="windows-端">Windows 端<a href="https://solidspoon.xyz/blog/configuring-wsl2-to-use-windows-proxy-for-internet-access#windows-%E7%AB%AF" class="hash-link" aria-label="Windows 端的直接链接" title="Windows 端的直接链接">​</a></h2>
<p>这里以 Clash 为例，打开 Allow LAN 选项，如下图所示。如果你使用其他软件，那可能是叫「网关模式」、「允许来自局域网的链接」或者其它的什么，都是一个东西，打开就好了，注意打开这个选项后你的电脑就可以代理整个局域网内的机器了，虽然其他的机器还需要额外的配置，但也还是注意安全。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217014320.png" alt="image.png" class="img_ev3q"></p>
<p>对于 Clash 来说，这个选项是一次性的，下次开机它就关了，不过可以在配置文件里改，通常文件的开头就是。如下图，改成 true 就行。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217014312.png" alt="image.png" class="img_ev3q"></p>
<p>开启这个选项后，仔细找找，你会找到一个 IP 地址和一个端口号，IP 其实就是本机 IP 啦，这两个数一会有用。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217014306.png" alt="image.png" class="img_ev3q"></p>
<p>Clash 这个端口 http 和 socks 通用</p>
<p>注意如果后文配置后没有效果，那可能是 Windows  防火墙的锅，快去配置防火墙放行 Clash</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wsl-2-端">WSL 2 端<a href="https://solidspoon.xyz/blog/configuring-wsl2-to-use-windows-proxy-for-internet-access#wsl-2-%E7%AB%AF" class="hash-link" aria-label="WSL 2 端的直接链接" title="WSL 2 端的直接链接">​</a></h2>
<p>说是 WSL 2，其实其他的手机电脑都能连上，就在网络设置或者 WiFi 设置那有个配置代理，把上面得到的 IP 和端口填上就行。</p>
<p>下面就说说在 WSL 2 下怎么操作吧！</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">## 获取主机 IP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 主机 IP 保存在 /etc/resolv.conf 中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export hostip=$(cat /etc/resolv.conf |grep -oP '(?&lt;=nameserver\ ).*')</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>Q: 以上似乎会定位到默认网关 <code>192.168.3.1</code>
A: 切换到 WSL2&nbsp;</p>
</blockquote>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">export https_proxy="http://${hostip}:7890";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export http_proxy="http://${hostip}:7890";</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意修改成你的端口</p>
<p>如果是 socket5 协议的话</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">export http_proxy="socks5://${hostip}:7890"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export https_proxy="socks5://${hostip}:7890"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如果端口一样就可以合并成一句话，http 的同理</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">export all_proxy="socks5://${hostip}:7890"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>使用 <code>curl</code> 即可验证是否代理成功，如下有返回值说明成功</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar curl google.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;H1&gt;301 Moved&lt;/H1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The document has moved</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>可以将上面命令选择你需要的添加到 <code>.bashrc</code>&nbsp;，这样会让代理一直开启。
使用 zsh 应该保存到  <code>~/.zshrc</code></p>
<p>更新配置</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">source ~/.zshrc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>或者添加如下，需要代理的时候输入 <code>setss</code>&nbsp;即可设置代理，取消代理就 <code>unsetss</code> ，或者新开一个窗口。
下面第二条的长命令你好像得根据情况删掉一部分。</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">export hostip=$(cat /etc/resolv.conf |grep -oP '(?&lt;=nameserver\ ).*')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alias setss='export https_proxy="http://${hostip}:7890";export http_proxy="http://${hostip}:7890";export all_proxy="socks5://${hostip}:7890";'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alias unsetss='unset all_proxy'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如下是我在 <code>~/.zshrc</code> 中添加的配置文件</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">export hostip=$(cat /etc/resolv.conf |grep -oP '(?&lt;=nameserver\ ).*')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alias setss='export all_proxy="socks5://${hostip}:7890";'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alias unsetss='unset all_proxy'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="验证">验证：<a href="https://solidspoon.xyz/blog/configuring-wsl2-to-use-windows-proxy-for-internet-access#%E9%AA%8C%E8%AF%81" class="hash-link" aria-label="验证：的直接链接" title="验证：的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar setss</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar curl google.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;H1&gt;301 Moved&lt;/H1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The document has moved</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar unsetss</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~cedar curl google.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">curl: (28) Failed to connect to google.com port 80: Connection timed out</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL 8.0 搭建半同步复制]]></title>
        <id>https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication</id>
        <link href="https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication"/>
        <updated>2021-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[说明：搭建半同步复制需要预先有基本的主从复制环境，具体可以看我之前的文章：]]></summary>
        <content type="html"><![CDATA[<p>说明：搭建半同步复制需要预先有基本的主从复制环境，具体可以看我之前的文章：</p>
<blockquote>
<p><a href="https://github.com/solidSpoon/solidSpoon.github.io/wiki" target="_blank" rel="noopener noreferrer">https://github.com/solidSpoon/solidSpoon.github.io/wiki</a></p>
</blockquote>
<p>半同步超时的时候，会自动降为异步工作。当Slave开启半同步后，或者当主从之间网络延迟恢复正常的时候，半同步复制会自动从异步复制又转为半同步复制，还是相当智能的。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="master-配置">Master 配置<a href="https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication#master-%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="Master 配置的直接链接" title="Master 配置的直接链接">​</a></h2>
<p>安装半同步模块并启动</p>
<p>这里 Windows 版本有个坑</p>
<p>对于 Linux 来说：此模块位置在 <code>/usr/local/mysql/lib/plugin/semisync_master.so</code>
对于 Windows Zip 版本来说：插件的位置本来在 <code>..\lib\semisync_master.dll</code> ，但是 MySQL 默认的位置是 <code>\bin\lib\plugin\semisync_master.so</code>&nbsp;</p>
<p>要解决这个问题，我们把 lib 目录复制一份过去就好了。</p>
<p>也可以在配置文件中指定插件目录：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[mysqld]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">plugin_dir=/path/to/plugin/directory</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如果 <a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/server-system-variables.html#sysvar_plugin_dir" target="_blank" rel="noopener noreferrer">plugin_dir</a> 的值是相对路径名，则将其视为相对于 MySQL 基本目录（ <a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/server-system-variables.html#sysvar_basedir" target="_blank" rel="noopener noreferrer">basedir</a> 系统变量的值）。</p>
<p>下面是安装模块的命令：</p>
<p>Linux：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; install plugin rpl_semi_sync_master soname 'semisync_master.so';</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Windows：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; install plugin rpl_semi_sync_master soname 'semisync_master.dll';</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>安装完后：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show global variables like '%semi%';</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show global variables like '%semi%';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Variable_name                             | Value      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_enabled              | OFF        | -&gt; 是否启用半同步协议</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_timeout              | 10000      | -&gt; 链接 Slave 超时时间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_trace_level          | 32         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_wait_for_slave_count | 1          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_wait_no_slave        | ON         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_wait_point           | AFTER_SYNC | -&gt; MySQL 5.7 之后默认值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6 rows in set, 1 warning (0.02 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; set global rpl_semi_sync_master_enabled = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; set global rpl_semi_sync_master_timeout = 2000;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>安装后启动和定制主从连接错误的超时时间默认是 10s 可改为 2s，一旦有一次超时自动降级为异步。（以上内容要想永久有效需要写到配置文件中）</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# cat /etc/my.cnf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[mysqld]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpl_semi_sync_master_enabled = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpl_semi_sync_master_timeout = 2000;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="slave-配置">Slave 配置<a href="https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication#slave-%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="Slave 配置的直接链接" title="Slave 配置的直接链接">​</a></h2>
<p>1）安装半同步模块并启动</p>
<p>Linux：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; install plugin rpl_semi_sync_slave soname 'semisync_slave.so';</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>WIndows：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; install plugin rpl_semi_sync_slave soname 'semisync_slave.dll';</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>同样，如果报错就把插件目录移动一下</p>
<p><code>lib</code> -&gt; <code>bin\lib</code></p>
<p>接着执行</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; set global rpl_semi_sync_slave_enabled = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show global variables like '%semi%';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Variable_name                             | Value      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_enabled              | ON         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_timeout              | 10000      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_trace_level          | 32         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_wait_for_slave_count | 1          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_wait_no_slave        | ON         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_master_wait_point           | AFTER_SYNC |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_slave_enabled               | ON         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| rpl_semi_sync_slave_trace_level           | 32         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">8 rows in set, 1 warning (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪�贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>2）从节点需要重新连接主服务器半同步才会生效</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; stop slave io_thread;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; start slave io_thread;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>PS：如果想卸载异步模块就使用 uninstall 即可。</p>
<p>Master 上查看是否启用了半同步</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210203214530.png" alt="" class="img_ev3q"></p>
<p>现在半同步已经正常工作了，主要看 <code>Rpl_semi_sync_master_clients</code> 是否不为 0，<code>Rpl_semi_sync_master_status</code> 是否为 ON。如果 <code>Rpl_semi_sync_master_status</code> 为 OFF，说明出现了网络延迟或 Slave IO 线程延迟。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="验证">验证<a href="https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication#%E9%AA%8C%E8%AF%81" class="hash-link" aria-label="验证的直接链接" title="验证的直接链接">​</a></h2>
<p>半同步超时，是否会自动降为异步工作</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="slave">Slave<a href="https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication#slave" class="hash-link" aria-label="Slave的直接链接" title="Slave的直接链接">​</a></h3>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="关闭半同步">关闭半同步;<a href="https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication#%E5%85%B3%E9%97%AD%E5%8D%8A%E5%90%8C%E6%AD%A5" class="hash-link" aria-label="关闭半同步;的直接链接" title="关闭半同步;的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; set global rpl_semi_sync_slave_enabled = 0 ;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; stop slave io_thread;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; start slave io_thread;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="master">Master<a href="https://solidspoon.xyz/blog/mysql-8-0-building-semi-synchronous-replication#master" class="hash-link" aria-label="Master的直接链接" title="Master的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; insert into t1(id) values(5),(4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 2 rows affected (10.06 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; insert into t1(id) values(6),(7);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 2 rows affected (0.03 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="教程" term="教程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows 下为 Git 设置代理]]></title>
        <id>https://solidspoon.xyz/blog/setting-up-proxy-for-git-on-windows</id>
        <link href="https://solidspoon.xyz/blog/setting-up-proxy-for-git-on-windows"/>
        <updated>2021-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Windows 下为 Git 设置代理]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="windows-下为-git-设置代理">Windows 下为 Git 设置代理<a href="https://solidspoon.xyz/blog/setting-up-proxy-for-git-on-windows#windows-%E4%B8%8B%E4%B8%BA-git-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86" class="hash-link" aria-label="Windows 下为 Git 设置代理的直接链接" title="Windows 下为 Git 设置代理的直接链接">​</a></h2>
<p>命令行上 GitHub 真是龟速，偶尔体验一下国内的 Gitee 就感觉爽爆了，还是快给 Git 整个代理吧！
Git 支持两种协议，SSH 和 HTTPS，配置的方式不一样，这两种方式平时都得用，下面分别介绍一下
<img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217132147.png" alt="image.png" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="设置-ssh-代理">设置 SSH 代理<a href="https://solidspoon.xyz/blog/setting-up-proxy-for-git-on-windows#%E8%AE%BE%E7%BD%AE-ssh-%E4%BB%A3%E7%90%86" class="hash-link" aria-label="设置 SSH 代理的直接链接" title="设置 SSH 代理的直接链接">​</a></h2>
<p>打开用户目录下 <code>.ssh</code> 文件夹，也就是 <code>C:\Users\&lt;用户名&gt;\.ssh</code>  ，在这个目录下新建一个叫做 config 的文件，注意没有后缀名，内容如下：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">## -S表示通过 sock5 协议连接</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 按照情况修改代理地址</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ProxyCommand connect.exe -S 127.0.0.1:7890 %h %p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Host github.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  User git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Port 22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Hostname github.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 注意将用户名替换成自己的</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IdentityFile "C:\Users\&lt;用户名&gt;\.ssh\id_rsa"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  TCPKeepAlive yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IdentitiesOnly yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Host ssh.github.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  User git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Port 443</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Hostname ssh.github.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 注意将用户名替换成自己的</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IdentityFile "C:\Users\&lt;用户名&gt;\.ssh\id_rsa"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  TCPKeepAlive yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IdentitiesOnly yes</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="检验">检验<a href="https://solidspoon.xyz/blog/setting-up-proxy-for-git-on-windows#%E6%A3%80%E9%AA%8C" class="hash-link" aria-label="检验的直接链接" title="检验的直接链接">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Cloning into 'solidSpoon.github.io'...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">remote: Enumerating objects: 91, done.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">remote: Counting objects: 100% (91/91), done.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">remote: Compressing objects: 100% (40/40), done.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">remote: Total 1532 (delta 40), reused 77 (delta 26), pack-reused 1441 eceiving objects:  99% (1517/1532), 39.85 MiB | 2.16 MiB/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Receiving objects: 100% (1532/1532), 41.13 MiB | 1.78 MiB/s, done.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Resolving deltas: 100% (593/593), done.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>嗯，有效果</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="设置-httphttps-代理">设置 http/https 代理<a href="https://solidspoon.xyz/blog/setting-up-proxy-for-git-on-windows#%E8%AE%BE%E7%BD%AE-httphttps-%E4%BB%A3%E7%90%86" class="hash-link" aria-label="设置 http/https 代理的直接链接" title="设置 http/https 代理的直接链接">​</a></h2>
<p>命令如下，也有可能不用加单引号，自己试试吧</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git config --global http.proxy 'socks5://127.0.0.1:7890'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git config --global https.proxy 'socks5://127.0.0.1:7890'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="取消-httphttps-代理">取消 http/https 代理<a href="https://solidspoon.xyz/blog/setting-up-proxy-for-git-on-windows#%E5%8F%96%E6%B6%88-httphttps-%E4%BB%A3%E7%90%86" class="hash-link" aria-label="取消 http/https 代理的直接链接" title="取消 http/https 代理的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git config --global --unset http.proxy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git config --global --unset https.proxy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://upupming.site/2019/05/09/git-ssh-socks-proxy/" target="_blank" rel="noopener noreferrer">https://upupming.site/2019/05/09/git-ssh-socks-proxy/</a></li>
</ul>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10 - MySQL 5.7 - Docker 搭建主从复制]]></title>
        <id>https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication</id>
        <link href="https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication"/>
        <updated>2021-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[搭建环境：Windows 10 Docker Desktop WSL 2 based engine]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>搭建环境：Windows 10 Docker Desktop WSL 2 based engine</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="创建">创建<a href="https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication#%E5%88%9B%E5%BB%BA" class="hash-link" aria-label="创建的直接链接" title="创建的直接链接">​</a></h2>
<p>首先创建两个数据库，一个作为主库，另一个作为从库</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="编写-docker-conpose-文件">编写 docker-conpose 文件<a href="https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication#%E7%BC%96%E5%86%99-docker-conpose-%E6%96%87%E4%BB%B6" class="hash-link" aria-label="编写 docker-conpose 文件的直接链接" title="编写 docker-conpose 文件的直接链接">​</a></h3>
<p>首先安装 docker，docker-compose
一般安装了 docker 都会安装 docker-compose，可以使用 <code>docker-compose -verison</code> 查看是否安装</p>
<p><code>docker pull mysql:5.7</code> 拉取 mysql5.7 镜像</p>
<p>编写 docker-compose 文件「docker-compose.yaml」</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2'</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">byfn</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">                                       </span><span class="token comment" style="color:#999988;font-style:italic">#配置byfn网络</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">master</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">                                     </span><span class="token comment" style="color:#999988;font-style:italic">#配置master服务</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mysql:5.7'</span><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">#使用刚才pull下来的镜像</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">restart</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> always</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">master              </span><span class="token comment" style="color:#999988;font-style:italic">#容器起名 mysql-master</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_USER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_ROOT_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123           </span><span class="token comment" style="color:#999988;font-style:italic">#配置root的密码</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'3316:3306'</span><span class="token plain">                           </span><span class="token comment" style="color:#999988;font-style:italic">#配置端口映射</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./master/my.cnf:/etc/mysql/my.cnf"</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">#配置my.cnf文件挂载，</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> byfn                                  </span><span class="token comment" style="color:#999988;font-style:italic">#配置当前servie挂载的网络</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">slave</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">                                      </span><span class="token comment" style="color:#999988;font-style:italic">#配置slave服务</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mysql:5.7'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">restart</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> always</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">slave</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_USER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_ROOT_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'3326:3306'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./slave/my.cnf:/etc/mysql/my.cnf"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> byfn</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="编写-cnf-文件">编写 cnf 文件<a href="https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication#%E7%BC%96%E5%86%99-cnf-%E6%96%87%E4%BB%B6" class="hash-link" aria-label="编写 cnf 文件的直接链接" title="编写 cnf 文件的直接链接">​</a></h3>
<p>在 <code>docker-compose.yaml</code> 当前目录下，建立两个文件夹，master 和 slave，里面分别写入文件「my.cnf」</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mater/my.cnf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mysqld</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">log</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">bin=/var/lib/mysql/mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">slave/my.cnf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mysqld</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">id=2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>分别保存后退出</p>
<p>然后在当前 docker-compose.yaml 文件目录下执行</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose -f docker-compse.yaml up -d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>此时两个数据库创建成功</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置">配置<a href="https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication#%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="配置的直接链接" title="配置的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="master">Master<a href="https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication#master" class="hash-link" aria-label="Master的直接链接" title="Master的直接链接">​</a></h3>
<p>启动之后进入 master 容器</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it mysql-master /bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -padmin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">进入 mysql 终端之后</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; create user 'repl'@'%' identified by 'admin123';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'repl'@'%'; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; flush privileges;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show master status;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>最后的 <code>show master status;</code></p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show master status;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql-bin.000003 |      767 |              |                  |                   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>需要记住 File 名字，和 Position 偏移位置</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="slave">Slave<a href="https://solidspoon.xyz/blog/win10-mysql-5-7-docker-building-master-slave-replication#slave" class="hash-link" aria-label="Slave的直接链接" title="Slave的直接链接">​</a></h3>
<p>另起一个终端进入 slave 容器</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it mysql-slave /bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -padmin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">进入 mysql 终端之后</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; CHANGE MASTER TO MASTER_HOST='mysql-master', MASTER_PORT=3306,  MASTER_USER='repl', MASTER_PASSWORD='admin123', MASTER_LOG_FILE='mysql-bin.000003', MASTER_LOG_POS=767;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; start slave;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里两个参数 MASTER_LOG_FILE 和 MASTER_LOG_POS 就是前面 master 上最后查询出来的；</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show slave status\G</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*************************** 1. row ***************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               Slave_IO_State: Waiting for master to send event</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  Master_Host: mysql-master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  Master_User: repl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  Master_Port: 3306</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Connect_Retry: 60</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              Master_Log_File: mysql-bin.000003</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          Read_Master_Log_Pos: 1116</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               Relay_Log_File: eefecaed2964-relay-bin.000002</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Relay_Log_Pos: 320</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Relay_Master_Log_File: mysql-bin.000003</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             Slave_IO_Running: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Slave_SQL_Running: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              Replicate_Do_DB:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          Replicate_Ignore_DB:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           Replicate_Do_Table:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>查询 slave 的状态，看到 Slave_IO_Running 和 Slave_SQL_Running 都是 yes 即为同步成功</p>
<p>可以登录 master 上创建数据库，表，然后在 slave 这边查看数据是否同步</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="教程" term="教程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10 - MySQL 8.0 - Docker 搭建主从复制]]></title>
        <id>https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication</id>
        <link href="https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication"/>
        <updated>2021-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[搭建环境：Windows 10 Docker Desktop WSL 2 based engine]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>搭建环境：Windows 10 Docker Desktop WSL 2 based engine</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="创建">创建<a href="https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication#%E5%88%9B%E5%BB%BA" class="hash-link" aria-label="创建的直接链接" title="创建的直接链接">​</a></h2>
<p>首先创建两个数据库，一个作为主库，另一个作为从库</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="编写-docker-conpose-文件">编写 docker-conpose 文件<a href="https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication#%E7%BC%96%E5%86%99-docker-conpose-%E6%96%87%E4%BB%B6" class="hash-link" aria-label="编写 docker-conpose 文件的直接链接" title="编写 docker-conpose 文件的直接链接">​</a></h3>
<p>一般安装了 docker 都会安装 docker-compose，可以使用 <code>docker-compose -verison</code> 查看是否安装</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">➜  ~ docker-compose -verison</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose version 1.27.4, build 40524192</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>新建一个文件夹「mysqlms」用于存放本次搭建的文件
在 「mysqlms」 文件夹新建 dokcer-compose 文件，文件名为 「docker-compose.yaml」</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2'</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">byfn</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">                                       </span><span class="token comment" style="color:#999988;font-style:italic">#配置byfn网络</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">master</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">                                     </span><span class="token comment" style="color:#999988;font-style:italic">#配置master服务</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mysql:latest'</span><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">#使用刚才pull下来的镜像</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">restart</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> on</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">master              </span><span class="token comment" style="color:#999988;font-style:italic">#容器起名 mysql-master</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_USER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_ROOT_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123           </span><span class="token comment" style="color:#999988;font-style:italic">#配置root的密码</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'3316:3306'</span><span class="token plain">                           </span><span class="token comment" style="color:#999988;font-style:italic">#配置端口映射</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./master/my.cnf:/etc/mysql/my.cnf"</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">#配置my.cnf文件挂载，</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./master/mysql-files:/var/lib/mysql-files"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">#MySQL 8.0 不加这一行会报错</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> byfn                                  </span><span class="token comment" style="color:#999988;font-style:italic">#配置当前servie挂载的网络</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">slave</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">                                      </span><span class="token comment" style="color:#999988;font-style:italic">#配置slave服务</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mysql:latest'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">restart</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> on</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">slave</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_USER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_ROOT_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> admin123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'3326:3306'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./slave/my.cnf:/etc/mysql/my.cnf"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./master/mysql-files:/var/lib/mysql-files"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">#MySQL 8.0 不加这一行会报错</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> byfn</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>- "./master/mysql-files:/var/lib/mysql-files"</code> 这一行的目的详见下面链接</p>
<blockquote>
<p><a href="https://github.com/docker-library/mysql/issues/541" target="_blank" rel="noopener noreferrer">https://github.com/docker-library/mysql/issues/541</a></p>
</blockquote>
<p>如果想明确指定 MySQL 版本，如： <code>image: 'mysql:8'</code></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="编写-cnf-文件">编写 cnf 文件<a href="https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication#%E7%BC%96%E5%86%99-cnf-%E6%96%87%E4%BB%B6" class="hash-link" aria-label="编写 cnf 文��件的直接链接" title="编写 cnf 文件的直接链接">​</a></h3>
<p>在 「mysqlms」新建两个文件夹 「master」 和 「slave」，在其中分别写入文件「my.cnf」</p>
<ul>
<li>mysqlms/master/my.cnf 内容如下：</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[mysqld]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server-id=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">log-bin=/var/lib/mysql/mysql-bin</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>mysqlms/slave/my.cnf 内容如下</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[mysqld]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server-id=2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在「mysqlms」目录下执行如下命令</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose -f docker-compose.yaml up -d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>此时两个主从数据库创建成功</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置">配置<a href="https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication#%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="配置的直接链接" title="配置的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="master">Master<a href="https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication#master" class="hash-link" aria-label="Master的直接链接" title="Master的直接链接">​</a></h3>
<p>启动之后进入 master 容器</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it mysql-master /bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -padmin123</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>此时进入了 MySql 终端，创建用于主从复制的用户</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">create user 'repl'@'%' identified with 'mysql_native_password' by 'admin123';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'repl'@'%'; </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里有一个需要注意的地方，应该是 MySQL 5.0 与 MySQL 8.0 的一个验证身份的比较大的区别：</p>
<p>MySql 8.0 默认指定使用需要 SSL 的身份验证插件 「caching_sha2_password」，意味着我们从库必须使用安全链接来连接到主库才可以，否则从库链接的时候会报错，错误代码为 2061，因此这里选择绕过这个插件，改为使用「mysql_native_password」来验证。有机会可以尝试以下使用安全连接。</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">flush privileges;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">show master status;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show master status;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql-bin.000003 |      767 |              |                  |                   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>需要记住 File 名字，和 Position 偏移位置</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="slave">Slave<a href="https://solidspoon.xyz/blog/win10-mysql-8-0-docker-building-master-slave-replication#slave" class="hash-link" aria-label="Slave的直接链接" title="Slave的直接链接">​</a></h3>
<p>在另一个终端进入 slave  容器</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it mysql-slave /bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -padmin123</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>进入 MySQL 终端之后</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; CHANGE MASTER TO MASTER_HOST='mysql-master', MASTER_PORT=3306,  MASTER_USER='repl', MASTER_PASSWORD='admin123', MASTER_LOG_FILE='mysql-bin.000003', MASTER_LOG_POS=767;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; start slave;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里两个参数 <code>MASTER_LOG_FILE</code> 和 <code>MASTER_LOG_POS</code> 就是前面 master 上最后查询出来的</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show slave status\G</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*************************** 1. row ***************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               Slave_IO_State: Waiting for master to send event</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  Master_Host: mysql-master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  Master_User: repl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  Master_Port: 3306</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Connect_Retry: 60</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              Master_Log_File: mysql-bin.000003</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          Read_Master_Log_Pos: 1116</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               Relay_Log_File: eefecaed2964-relay-bin.000002</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Relay_Log_Pos: 320</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Relay_Master_Log_File: mysql-bin.000003</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             Slave_IO_Running: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Slave_SQL_Running: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              Replicate_Do_DB:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          Replicate_Ignore_DB:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           Replicate_Do_Table</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">......</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>可以从中看到一些信息：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">             Slave_IO_Running: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Slave_SQL_Running: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>可见主从配置成功</p>
<hr>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/wawa8899/article/details/86689618" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/wawa8899/article/details/86689618</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/replication-howto-repuser.html" target="_blank" rel="noopener noreferrer">https://dev.mysql.com/doc/refman/8.0/en/replication-howto-repuser.html</a></li>
<li><a href="https://github.com/docker-library/mysql/issues/541" target="_blank" rel="noopener noreferrer">https://github.com/docker-library/mysql/issues/541</a></li>
<li><a href="https://blog.csdn.net/wangxiaotongfan/article/details/81870258" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/wangxiaotongfan/article/details/81870258</a></li>
</ul>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="教程" term="教程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10 - MySQL 8 Zip 版 - 搭建基于 GTID 的主从复制]]></title>
        <id>https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication</id>
        <link href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication"/>
        <updated>2021-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[配置环境：Windows 10 - MySQL 压缩版]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>配置环境：Windows 10 - MySQL 压缩版</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E5%89%8D%E8%A8%80" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h2>
<p>GTID 是干嘛的？</p>
<blockquote>
<p>GTID (Global Transaction IDentifier) 是全局事务标识。它具有全局唯一性，一个事务对应一个GTID。唯一性不仅限于主服务器，GTID在所有的从服务器上也是唯一的。一个GTID在一个服务器上只执行一次，从而避免重复执行导致数据混乱或主从不一致。</p>
<p>在传统的复制里面，当发生故障需要主从切换时，服务器需要找到binlog和pos点，然后将其设定为新的主节点开启复制。相对来说比较麻烦，也容易出错。在MySQL 5.6里面，MySQL会通过内部机制自动匹配GTID断点，不再寻找binlog和pos点。我们只需要知道主节点的ip，端口，以及账号密码就可以自动复制。
<a href="http://mysql.taobao.org/monthly/2020/05/09/" target="_blank" rel="noopener noreferrer">http://mysql.taobao.org/monthly/2020/05/09/</a></p>
</blockquote>
<p>在传统的主从复制中，我们需要在从库中指定主库的 Log 文件与 Position ，在基于 DTID 的主从复制中，不需要这一步骤。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="准备两个-mysql-服务实例">准备两个 MySQL 服务实例<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA-mysql-%E6%9C%8D%E5%8A%A1%E5%AE%9E%E4%BE%8B" class="hash-link" aria-label="准备两个 MySQL 服务实例的直接链接" title="准备两个 MySQL 服务实例的直接链接">​</a></h2>
<p>8.0 压缩版下载地址：</p>
<blockquote>
<p><a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip" target="_blank" rel="noopener noreferrer">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip</a></p>
</blockquote>
<p>解压后再复制一份，假设命名为 <code>mysql-8.0.16-winx64</code> 和 <code>mysql-8.0.16-winx64-2</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改主-mysql-8的-myini">修改主 MySQL-8的 <code>my.ini</code><a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E4%BF%AE%E6%94%B9%E4%B8%BB-mysql-8%E7%9A%84-myini" class="hash-link" aria-label="修改主-mysql-8的-myini的直接链接" title="修改主-mysql-8的-myini的直接链接">​</a></h2>
<p>在 <code>mysql-8.0.16-winx64</code> 目录下添加 my.ini 文件，内容如下：</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mysqld</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">basedir = ./</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">datadir = ./data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port = 3306</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server_id = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gtid_mode=ON</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">enforce</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">gtid</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">consistency</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sql_mode=NO_ENGINE_SUBSTITUTION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">STRICT_TRANS_TABLES </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">log_bin=mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">binlog</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">format=Row</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改从-mysql-8的-myini">修改从 MySQL-8的 <code>my.ini</code><a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E4%BF%AE%E6%94%B9%E4%BB%8E-mysql-8%E7%9A%84-myini" class="hash-link" aria-label="修改从-mysql-8的-myini的直接链接" title="修改从-mysql-8的-myini的直接链接">​</a></h2>
<p>在从 <code>mysql-8.0.16-winx64-2</code> 目录下添加 my.ini 文件，内容如下：</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mysqld</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">basedir = ./</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">datadir = ./data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port = 3316</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server_id = 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gtid_mode=ON</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">enforce</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">gtid</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">consistency</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sql_mode=NO_ENGINE_SUBSTITUTION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">STRICT_TRANS_TABLES </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">log_bin=mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">binlog</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">format=Row</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化和启动数据库">初始化和启动数据库<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8%E6%95%B0%E6%8D%AE%E5%BA%93" class="hash-link" aria-label="初始化和启动数据库的直接链接" title="初始化和启动数据库的直接链接">​</a></h2>
<p>空数据库需要初始化，分别在两个数据库的 <code>\bin</code> 目录下执行 <code>mysqld --initialize-insecure</code> 进行初始化。</p>
<p>分别启动主和从，在两个数据库的 <code>\bin</code> 目录下直接执行 <code>mysqld</code> 或 <code>start mysqld</code> 命令即可。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置主节点">配置主节点<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E9%85%8D%E7%BD%AE%E4%B8%BB%E8%8A%82%E7%82%B9" class="hash-link" aria-label="配置主节点的直接链接" title="配置主节点的直接链接">​</a></h2>
<p>用 <code>mysql</code> 命令登录到主节点：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -P3306</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>进入后执行下面命令</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; CREATE USER 'repl'@'%' IDENTIFIED BY '123456';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.11 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.12 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; flush privileges;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.10 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>创建数据库：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">create schema db;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="主节点证书文件">主节点证书文件<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E4%B8%BB%E8%8A%82%E7%82%B9%E8%AF%81%E4%B9%A6%E6%96%87%E4%BB%B6" class="hash-link" aria-label="主节点证书文件的直接链接" title="主节点证书文件的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; SHOW GLOBAL VARIABLES LIKE 'caching_sha2_password_public_key_path';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------------------------------+----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Variable_name                         | Value          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------------------------------+----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| caching_sha2_password_public_key_path | public_key.pem |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------------------------------+----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这个文件在初始化后位于 <code>\bin\data</code> 下</p>
<p>因为 MySQL 8 默认是用 <code>caching_sha2_password</code> 做认证插件，这点与 MySQL 5 不同：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">error connecting to master 'repl@localhost:3306' - retry-time: 60 retries: 18 message: Authentication plugin 'caching_sha2_password' reported error: Authentication requires secure connection.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这个文件就是基于默认设置 <code>caching_sha2_password</code> 下的通讯公钥文件。默认情况服务器不会给客户端发送，所以需要拷贝到从节点的目录下。</p>
<p>如果不想拷贝的话 ：</p>
<p>MySQL 8.0 的版本要在<strong>从数据库</strong>初始设置（CHANGE MASTER TO）加：</p>
<p><code>MASTER_PUBLIC_KEY_PATH = 'key_file_name'</code></p>
<p>或者</p>
<p><code>GET_MASTER_PUBLIC_KEY = {0|1}</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置从节点">配置从节点<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E9%85%8D%E7%BD%AE%E4%BB%8E%E8%8A%82%E7%82%B9" class="hash-link" aria-label="配置从节点的直接链接" title="配置从节点的直接链接">​</a></h2>
<p>把刚才的 <code>public_key.pem</code> 文件改名为 <code>master_public_key.pem</code> 然后拷贝到从服务器的 <code>\bin\data</code> 文件夹中，这个文件夹在用上面的命令初始化之后才有。</p>
<p><code>mysql</code> 命令登录到从节点：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -P3316</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHANGE MASTER TO</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_HOST='localhost',  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_PORT = 3306,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_USER='repl',      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_PASSWORD='123456',   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_PUBLIC_KEY_PATH='master_public_key.pem',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_AUTO_POSITION = 1;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里有个问题，MySQL 8 下面不需要创建 db 。否则会报错说已经存在 db 。
--创建数据库：create schema db;--</p>
<p>直接开始执行同步
<code>start/stop slave;</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="验证操作">验证操作<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E9%AA%8C%E8%AF%81%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="验证操作的直接链接" title="验证操作的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="主库">主库<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E4%B8%BB%E5%BA%93" class="hash-link" aria-label="主库的直接链接" title="主库的直接链接">​</a></h3>
<p>在主库执行：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; use db</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Database changed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; create table t1(id int);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.17 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; insert into t1(id) values(1),(2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 2 rows affected (0.04 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="从库">从库<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E4%BB%8E%E5%BA%93" class="hash-link" aria-label="从库的直接链接" title="从库的直接链接">​</a></h3>
<p>在从库查看数据同步情况</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; use db</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Database changed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show tables;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Tables_in_db |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| t1           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; select * from t1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| id   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    1 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    2 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2 rows in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="查看命令">查看命令<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-gtid-based-master-slave-replication#%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4" class="hash-link" aria-label="查看命令的直接链接" title="查看命令的直接链接">​</a></h2>
<p>可以通过 <code>show master status\G</code>，<code>show slave status\G</code> 查看状态，或定位一些问题</p>
<p>可以能改过 <code>stop slave;</code> &nbsp;<code>start slave;</code> 来停止复制。</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="教程" term="教程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10 - MySQL 8 Zip 版 - 搭建主从复制]]></title>
        <id>https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication</id>
        <link href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication"/>
        <updated>2021-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Win10 - MySQL 8 压缩版 - 主从复制]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="win10---mysql-8-压缩版---主从复制">Win10 - MySQL 8 压缩版 - 主从复制<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#win10---mysql-8-%E5%8E%8B%E7%BC%A9%E7%89%88---%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6" class="hash-link" aria-label="Win10 - MySQL 8 压缩版 - 主从复制的直接链接" title="Win10 - MySQL 8 压缩版 - 主从复制的直接链接">​</a></h2>
<blockquote>
<p>配置环境：Windows 10 - MySQL 压缩版</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="准备两个-mysql-服务实例">准备两个 MySQL 服务实例<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA-mysql-%E6%9C%8D%E5%8A%A1%E5%AE%9E%E4%BE%8B" class="hash-link" aria-label="准备两个 MySQL 服务实例的直接链接" title="准备两个 MySQL 服务实例的直接链接">​</a></h2>
<p>8.0 压缩版下载地址：</p>
<blockquote>
<p><a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip" target="_blank" rel="noopener noreferrer">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip</a></p>
</blockquote>
<p>解压后再复制一份，假设命名为 <code>mysql-8.0.16-winx64</code> 和 <code>mysql-8.0.16-winx64-2</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改主-mysql-8的-myini">修改主 MySQL-8的 <code>my.ini</code><a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E4%BF%AE%E6%94%B9%E4%B8%BB-mysql-8%E7%9A%84-myini" class="hash-link" aria-label="修改主-mysql-8的-myini的直接链接" title="修改主-mysql-8的-myini的直接链接">​</a></h2>
<p>在 <code>mysql-8.0.16-winx64</code> 目录下添加 my.ini 文件，内容如下：</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mysqld</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">basedir = ./</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">datadir = ./data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port = 3306</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server_id = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sql_mode=NO_ENGINE_SUBSTITUTION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">STRICT_TRANS_TABLES </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">log_bin=mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">binlog</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">format=Row</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改从-mysql-8的-myini">修改从 MySQL-8的 <code>my.ini</code><a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E4%BF%AE%E6%94%B9%E4%BB%8E-mysql-8%E7%9A%84-myini" class="hash-link" aria-label="修改从-mysql-8的-myini的直接链接" title="修改从-mysql-8的-myini的直接链接">​</a></h2>
<p>在从 <code>mysql-8.0.16-winx64-2</code> 目录下添加 my.ini 文件，内容如下：</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">mysqld</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">basedir = ./</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">datadir = ./data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port = 3316</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server_id = 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sql_mode=NO_ENGINE_SUBSTITUTION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">STRICT_TRANS_TABLES </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">log_bin=mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">binlog</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">format=Row</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化和启动数据库">初始化和启动数据库<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8%E6%95%B0%E6%8D%AE%E5%BA%93" class="hash-link" aria-label="初始化和启动数据库的直接链接" title="初始化和启动数据库的直接链接">​</a></h2>
<p>空数据库需要初始化，分别在两个数据库的 <code>\bin</code> 目录下执行 <code>mysqld --initialize-insecure</code> 进行初始化。</p>
<p>分别启动主和从，在两个数据库的 <code>\bin</code> 目录下直接执行 <code>mysqld</code> 或 <code>start mysqld</code> 命令即可。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置主节点">配置主节点<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E9%85%8D%E7%BD%AE%E4%B8%BB%E8%8A%82%E7%82%B9" class="hash-link" aria-label="配置主节点的直接链接" title="配置主节点的直接链接">​</a></h2>
<p>用 <code>mysql</code> 命令登录到主节点：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -P3306</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>进入后执行下面命令</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; CREATE USER 'repl'@'%' IDENTIFIED BY '123456';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.11 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.12 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; flush privileges;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.10 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show master status;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql-bin.000003 |      305 |              |                  |                   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>创建数据库：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">create schema db;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="主节点证书文件">主节点证书文件<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E4%B8%BB%E8%8A%82%E7%82%B9%E8%AF%81%E4%B9%A6%E6%96%87%E4%BB%B6" class="hash-link" aria-label="主节点证书文件的直接链接" title="主节点证书文件�的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; SHOW GLOBAL VARIABLES LIKE 'caching_sha2_password_public_key_path';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------------------------------+----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Variable_name                         | Value          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------------------------------+----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| caching_sha2_password_public_key_path | public_key.pem |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------------------------------+----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这个文件在初始化之后位于 <code>\bin\data</code> 下</p>
<p>因为 MySQL 8 默认是用 <code>caching_sha2_password</code> 做认证插件，这点与 MySQL 5 不同：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">error connecting to master 'repl@localhost:3306' - retry-time: 60 retries: 18 message: Authentication plugin 'caching_sha2_password' reported error: Authentication requires secure connection.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这个文件就是基于默认设置 <code>caching_sha2_password</code> 下的通讯公钥文件。默认情况服务器不会给客户端发送，所以需要拷贝到从节点的目录下。</p>
<p>如果不想拷贝的话 ：
MySQL 8.0 的版本要在<strong>从数据库</strong>初始设置（CHANGE MASTER TO）加：
<code>MASTER_PUBLIC_KEY_PATH = 'key_file_name'</code>
或者
<code>GET_MASTER_PUBLIC_KEY = {0|1}</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置从节点">配置从节点<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E9%85%8D%E7%BD%AE%E4%BB%8E%E8%8A%82%E7%82%B9" class="hash-link" aria-label="配置从节点的直接链接" title="配置从节点的直接链接">​</a></h2>
<p>把刚才的 <code>public_key.pem</code> 文件改名为 <code>master_public_key.pem</code> 然后拷贝到从服务器的 <code>\bin\data</code> 文件夹中，注意这个文件夹用上面的那个命令初始化之后才有。</p>
<p><code>mysql</code> 命令登录到从节点：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql -uroot -P3316</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>还记得刚刚在主库查看的表格吗？</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show master status;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql-bin.000003 |      305 |              |                  |                   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+----------+--------------+------------------+-------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意以下的 MASTER_LOG_POS 需要改成这个表格上 Position 的数值</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CHANGE MASTER TO</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_HOST='localhost',  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_PORT = 3306,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_USER='repl',      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_PASSWORD='123456',   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_LOG_FILE='mysql-bin.000002',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_LOG_POS=855,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MASTER_PUBLIC_KEY_PATH='master_public_key.pem';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //MASTER_AUTO_POSITION = 1;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里有个问题，MySQL 8 下面不需要创建 db 。否则会报错说已经存在 db 。
--创建数据库：create schema db;--</p>
<p>直接开始执行同步
<code>start/stop slave;</code></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="验证操作">验证操作<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E9%AA%8C%E8%AF%81%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="验证操作的直接链接" title="验证操作的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="主库">主库<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E4%B8%BB%E5%BA%93" class="hash-link" aria-label="主库的直接链接" title="主库的直接链接">​</a></h3>
<p>在主库执行：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; use db</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Database changed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; create table t1(id int);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.17 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; insert into t1(id) values(1),(2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 2 rows affected (0.04 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="从库">从库<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E4%BB%8E%E5%BA%93" class="hash-link" aria-label="从库的直接链接" title="从库的直接链接">​</a></h3>
<p>在从库查看数据同步情况</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; use db</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Database changed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show tables;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Tables_in_db |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| t1           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; select * from t1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| id   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    1 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    2 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2 rows in set (0.00 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="查看命令">查看命令<a href="https://solidspoon.xyz/blog/win10-mysql-8-zip-version-building-master-slave-replication#%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4" class="hash-link" aria-label="查看命令的直接链接" title="查看命令的直接链接">​</a></h2>
<p>可以通过 <code>show master status\G</code>，<code>show slave status\G</code> 查看状态，或定位一些问题</p>
<p>可以能改过 <code>stop slave;</code>  <code>start slave;</code> 来停止复制。</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="教程" term="教程"/>
    </entry>
</feed>