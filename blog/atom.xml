<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://solidspoon.xyz/blog</id>
    <title>solidSpoon's site Blog</title>
    <updated>2022-06-16T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://solidspoon.xyz/blog"/>
    <subtitle>solidSpoon's site Blog</subtitle>
    <icon>https://solidspoon.xyz/img/logoo.svg</icon>
    <entry>
        <title type="html"><![CDATA[锁库大师]]></title>
        <id>https://solidspoon.xyz/blog/inventory-lock-master</id>
        <link href="https://solidspoon.xyz/blog/inventory-lock-master"/>
        <updated>2022-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[背景]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E8%83%8C%E6%99%AF" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2>
<p>希望在顾客下单时对库存明细表中的商品进行库存锁定，库存明细表简化后如下所示：</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/202206130943348.png" alt="背景" class="img_ev3q"></p>
<p>可见一条产品编码有可能存在多条库存明细，客户的订单大致会锁定几十行的库存，要求如下：</p>
<ul>
<li>尽可能快，并发也高，支持多节点</li>
<li>为了数据的一致性，最好不用 redis 扣减的方案</li>
<li>锁库同时在锁库流水表中插入锁库记录</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="优化方案">优化方案<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88" class="hash-link" aria-label="优化方案的直接链接" title="优化方案的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="分析">分析<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%88%86%E6%9E%90" class="hash-link" aria-label="分析的直接链接" title="分析的直接链接">​</a></h3>
<p>通过分析系统现有的方案，发现锁库操作时间主要浪费在更新库存明细的锁库数量上，为了防止超卖，每一条更新必须加上库存校验（如下所示），一旦失败就要回滚，在加之 MySQL 并没有提供原生批量更新方法，只能每行库存执行一条 SQL，导致锁库时间较长。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="提高锁库速度">提高锁库速度<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%8F%90%E9%AB%98%E9%94%81%E5%BA%93%E9%80%9F%E5%BA%A6" class="hash-link" aria-label="提高锁库速度的直接链接" title="提高锁库速度的直接链接">​</a></h3>
<p>优化的第一步就是想要提高批量锁库的速度，有没有方法能够在 MySQL 中模拟批量更新呢？</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="when-语句">WHEN 语句<a href="https://solidspoon.xyz/blog/inventory-lock-master#when-%E8%AF%AD%E5%8F%A5" class="hash-link" aria-label="WHEN 语句的直接链接" title="WHEN 语句的直接链接">​</a></h4>
<p>答案就是使用 SQL 的 <code>when</code> 语句，在程序中拼接出如下的 SQL</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">UPDATE</span><span class="token plain"> p_stock_instance a  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SET</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">CASE</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b31123'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'025d4574cd934b69993703e7e99e8ca43'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b313'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">END</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">update_date      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">CASE</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b31123'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'025d4574cd934b69993703e7e99e8ca43'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">WHEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'027dbba9c04a4ef0baab3983c64bc0b313'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">THEN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">ELSE</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">END</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>SQL 执行完毕后会返回更新行数，在程序中判断更新行数是否与预期相符即可判断是否更新成功，程序示意如下：</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Integer num = pStockInstanceDao.operationStockSmallData(operationMapping);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (num != operationMapping.size()) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new RuntimeException("操作失败");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这种方法的更新速度很快，在我的测试中，更新两万行库存记录的耗时大约 17 秒。但其实还有更快的方法。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="临时表">临时表<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E4%B8%B4%E6%97%B6%E8%A1%A8" class="hash-link" aria-label="临时表的直接链接" title="临时表的直接链接">​</a></h4>
<p>使用<strong>临时表更新库存</strong>的方法在数据量比较大的情况下比 WHEN 语句的性能好很多，测试条件下更新两万行库存记录耗时大约 1 秒</p>
<p>临时表是 MySQL 中的一种特殊表，他有如下几个特征：</p>
<ul>
<li>临时表是线程内可见，线程之间看不到其他线程创建的临时表</li>
<li>线程推出后临时表就被销毁</li>
<li>临时表与普通表重名时 MySQL 优先选择临时表操作</li>
</ul>
<p>本案例中创建临时表的语句如下：</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">create</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">temporary</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">table</span><span class="token plain"> temp_stock_operation  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stock_instance_id </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unique</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'库存实例ID'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    op_num            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain">                  </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'操作数量'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    success           </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'是否成功'</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>stock_instance_id</code> 就是库存明细表中的 <code>id</code></p>
<p><strong>更新库存时</strong>：</p>
<ol>
<li>创建临时表</li>
<li>先将每一行库存明细要锁定的库存数量插入到临时表中</li>
<li>然后通过 UPDATE JOIN 语句批量更新库存，同时将是否更新成功的信息保存在临时表的 <code>success</code> 字段中</li>
<li>统计 <code>success</code> 字段，判断是否回滚</li>
<li>删除临时表</li>
</ol>
<p>使用的 UPDATE 语句如下：</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">update</span><span class="token plain"> temp_stock_operation o </span><span class="token keyword" style="color:#00009f">inner</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> p_stock_instance s  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_instance_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>检查是否成功，该语句返回值为 0 或 1 。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> success  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> temp_stock_operation  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>最后删除临时表：</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">drop</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">temporary</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">table</span><span class="token plain"> temp_stock_operation</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="将二者结合">将二者结合<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%B0%86%E4%BA%8C%E8%80%85%E7%BB%93%E5%90%88" class="hash-link" aria-label="将二者结合的直接链接" title="将二者结合的直接链接">​</a></h4>
<p>虽然使用临时表的方案更新大量数据时很快，但是如果使用这个方法来更新几十条库存时就会发现速度又变慢了，在我的测试中，更新三四十条的耗时几乎与更新两万条相等。</p>
<p>就是说这条更新语句在数量少的时候性能会下降</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">update</span><span class="token plain"> temp_stock_operation o </span><span class="token keyword" style="color:#00009f">inner</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> p_stock_instance s  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_instance_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>分析它的执行计划，发现当更新行数小于 45 时，JOIN 操作便不会走索引，而是全表扫描，导致性能下降。这时候即使使用下面的 SQL 语句强制索引也是<strong>没用的</strong>。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">update</span><span class="token plain"> temp_stock_operation o </span><span class="token keyword" style="color:#00009f">force</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">index</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stock_instance_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">inner</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> p_stock_instance s  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_instance_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stock_quantity </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">locking_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op_num  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">success </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>所以我们要将这两种方法结合，来获得最佳的性能</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if (operationMapping.size() &lt; 45) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // WHEN 语句方案</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Integer num = pStockInstanceDao.operationStockSmallData(operationMapping);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (num != operationMapping.size()) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throw new RuntimeException("操作失败");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} else {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 临时表方案</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Boolean success = pStockInstanceDao.operationStockBigData(operationMapping);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (!success) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throw new RuntimeException("操作失败");  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="提高并发量">提高并发量<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%8F%90%E9%AB%98%E5%B9%B6%E5%8F%91%E9%87%8F" class="hash-link" aria-label="提高并发量的直接链接" title="提高并发量的直接链接">​</a></h3>
<p>由于并发时多个线程间存在竞态条件，可能导致库存扣减失败，而前面说到库存明细表中一件商品可能对应多条库存明细，就是说如果并发导致有一条库存明细扣减失败的话很可能这个商品在其他的库存明细中还有库存。而且由于无论更没更新成功，线程都会占有数据库行的写锁，这就要求我们更新失败时最好能够快速释放锁，这又会导致接口会误报库存不足。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="商品编码锁">商品编码锁<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%95%86%E5%93%81%E7%BC%96%E7%A0%81%E9%94%81" class="hash-link" aria-label="商品编码锁的直接链接" title="商品编码锁的直接链接">​</a></h4>
<p>一个解决办法如下</p>
<ol>
<li>线程在执行库存数量查询前为订单中的每个商品编码获取一个分布式锁，只有获得全部商品编码的锁时才进行库存的查询操作</li>
<li>线程在更新完库存后释放所持有的商品编码锁</li>
</ol>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RLock[] locks = productSids.seream()  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .distinct()  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .map(key -&gt; "ced:pStockInstance:" + key)  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .sorted()  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .map(key -&gt; redissonClient.getLock(key))  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .toArray(RLock[]::new);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RLock skuLock = redissonClient.getMultiLock(locks);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 加锁</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">skuLock.lock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 解锁</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">skuLock.unlockAsync();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这种方法当所有的订单都锁定同一个商品时就会导致程序退化成串行执行，效率很慢。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="和并请求">和并请求<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%92%8C%E5%B9%B6%E8%AF%B7%E6%B1%82" class="hash-link" aria-label="和并请求的直接链接" title="和并请求的直接链接">​</a></h4>
<p>由于前文我们已经将库存更新的方法优化的足够快，因此想高效地解决竞态条件的问题，可以将各个请求的参数在应用程序中合并在一起，然后使用一个线程批量扣减，从而避免线程间扣减冲突。</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/202206130944601.png" alt="合并请求" class="img_ev3q"></p>
<p>使线程阻塞并被唤醒的关键代码如下</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class GuardedObject&lt;T, K&gt; {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //受保护的对象  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    T obj;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final Lock lock = new ReentrantLock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final Condition done = lock.newCondition();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final int timeout = 60;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //保存所有GuardedObject  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final static Map&lt;Object, GuardedObject&gt; gos = new ConcurrentHashMap&lt;&gt;();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public GuardedObject(K key) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.key = key;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    K key;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 1. 被请求线程通过唯一 key 获得阻塞对象，然后将 key 存入消息，发送到扣减中心  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static &lt;K&gt; GuardedObject create(K key) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        GuardedObject go = new GuardedObject(key.toString());  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        gos.put(key, go);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return go;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 2. 被请求线程稍后调用阻塞对象的该方法，阻塞，等待被唤醒</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Optional&lt;T&gt; get(Predicate&lt;T&gt; p) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lock.lock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Long start = System.currentTimeMillis();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            while (!p.test(obj)) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                done.await(timeout, TimeUnit.SECONDS);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (System.currentTimeMillis() - start &gt;= timeout * 1000) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    gos.remove(key);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    break;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return Optional.ofNullable(obj);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (InterruptedException e) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new RuntimeException(e);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lock.unlock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 3. 结果监听器根据结果消息中的 key 找到对应阻塞对象，传入结果并唤醒对应线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static &lt;K, T&gt; void fireEvent(K key, T obj) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        GuardedObject go = gos.remove(key);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (go != null) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            go.onChanged(obj);  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //事件通知方法  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void onChanged(T obj) {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lock.lock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.obj = obj;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            done.signalAll();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lock.unlock();  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="性能测试">性能测试<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="性能测试的直接链接" title="性能测试的直接链接">​</a></h2>
<p>实验环境为了获得最坏情况下的性能，在库存明细中存入了两万五千条同一商品，并将每一条的数据的库存数量设置为 1</p>
<p>在我的电脑中启动两个服务接收请求，启动若干线程对该商品进行扣减，结果如下</p>
<table><thead><tr><th>请求线程数量</th><th>总计锁库行数</th><th>全部处理耗时</th></tr></thead><tbody><tr><td>100</td><td>1000</td><td>1 S</td></tr><tr><td>500</td><td>5000</td><td>3 S</td></tr><tr><td>1000</td><td>10000</td><td>4 S</td></tr><tr><td>2000</td><td>20000</td><td>8 S</td></tr><tr><td>3000</td><td>25000</td><td>12 S</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="注意事项">注意事项<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="注意事项的直接链接" title="注意事项的直接链接">​</a></h2>
<p>以下是我在编写代码时发现的一些需要注意的点：</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="唯一索引">唯一索引<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95" class="hash-link" aria-label="唯一索引的直接链接" title="唯一索引的直接链接">​</a></h3>
<p>在创建临时表时 <code>stock_instance_id</code> 要创建唯一索引，因为这个字段要充当 JOIN 语句的条件，实测不加唯一索引性能会很差。</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">create</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">temporary</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">table</span><span class="token plain"> temp_stock_operation  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stock_instance_id </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unique</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">null</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">comment</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'库存实例ID'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="加快消息队列读取">加快消息队列读取<a href="https://solidspoon.xyz/blog/inventory-lock-master#%E5%8A%A0%E5%BF%AB%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%AF%BB%E5%8F%96" class="hash-link" aria-label="加快消息队列读取的直接链接" title="加快消息队列读取的直接链接">​</a></h3>
<p>扣减中心的库存扣减线程直接从消息队列读取消息效率较低，在本案例中，可以新建一个本地队列，用其他线程将消息队列中的消息搬运到本地队列，让扣减线程操作本地队列而不是消息队列，这样可以大幅提高扣减效率。</p>
<hr>
<p>源码请见：<a href="https://github.com/solidSpoon/inventory-lock-master" target="_blank" rel="noopener noreferrer">https://github.com/solidSpoon/inventory-lock-master</a></p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ClashForWindows tap 模式无法正常连接网络]]></title>
        <id>https://solidspoon.xyz/blog/clash-for-windows-tap-mode-cannot-connect-to-network-normally</id>
        <link href="https://solidspoon.xyz/blog/clash-for-windows-tap-mode-cannot-connect-to-network-normally"/>
        <updated>2022-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ClashForWindows 正常情况下只能代理通过 Http 或 Socks 代理工作。这两种协议工作在网络模型中的较高层级，可能无法代理系统全部的流量，比如对 SSH 或 WSL 等不起作用，使用时需要对这些应用单独配置。其实下面这几个选项可以让 ClashForWindows 有能力在 TCP/IP 层级工作，从而代理系统全部流量，具体的教程参见官方文档]]></summary>
        <content type="html"><![CDATA[<p>ClashForWindows 正常情况下只能代理通过 Http 或 Socks 代理工作。这两种协议工作在网络模型中的较高层级，可能无法代理系统全部的流量，比如对 SSH 或 WSL 等不起作用，使用时需要对这些应用单独配置。其实下面这几个选项可以让 ClashForWindows 有能力在 TCP/IP 层级工作，从而代理系统全部流量，具体的教程参见<a href="https://docs.cfw.lbyczf.com/contents/tun.html#windows" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/2021/12/02/20211202-230605.png" alt="image-20211202230604161" class="img_ev3q"></p>
<p>这里主要提一下通过官方文档操作之后无法正常代理的情况，这种情况 GitHub 的 issue 上已经有了解决方案，<a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1243" target="_blank" rel="noopener noreferrer">链接</a>。如果你也连不上网，不妨排查一下网卡的驱动或相关应用</p>
<p><img loading="lazy" src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/2021/12/02/20211202-231144.png" alt="image-20211202231142928" class="img_ev3q"></p>
<p>使用上述方法代理系统全部流量时，可以关闭 ClashForWindows 的 System Proxy 开关，也会正常工作。</p>
<p>需要提及一下，这种方法虽然可以代理全部系统流量，看起来十分强大，但它的性能不如直接使用 Http 或 Socks 代理，所以还是要看情况使用不同的代理方案。</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="教程" term="教程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义 ClassLoader 加载一个加密 class 文件]]></title>
        <id>https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file</id>
        <link href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file"/>
        <updated>2021-03-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[跟着我体验一下传说中非常厉害的类加载器吧！]]></summary>
        <content type="html"><![CDATA[<p>跟着我体验一下传说中非常厉害的类加载器吧！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="制作加密-class">制作加密 class<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%88%B6%E4%BD%9C%E5%8A%A0%E5%AF%86-class" class="hash-link" aria-label="制作加密 class的直接链接" title="制作加密 class的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="目标类">目标类<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E7%9B%AE%E6%A0%87%E7%B1%BB" class="hash-link" aria-label="目标类的直接链接" title="目标类的直接链接">​</a></h3>
<p>我们要加载的类很简单，它只有一个 <code>hello()</code> 方法。编译这个类生成 class 文件，待会要用</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package ClassLoader;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Hello {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void hello(){ </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello, classLoader!"); </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="加密">加密<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%8A%A0%E5%AF%86" class="hash-link" aria-label="加密的直接链接" title="加密的直接链接">​</a></h3>
<p>下面这段代码读取了刚才生成的 Hello.class ，加密之后保存为 Hello.xlass</p>
<p><code>encode()</code> 实现了一个简单的加密，加载类的时候使用同样的方法就可以解密</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package ClassLoader;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.File;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileInputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileOutputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.IOException;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @author : solidSpoon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @date : 2021/3/5 1:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class EncodeFile {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String name = "Hello";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        EncodeFile ef = new EncodeFile();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        byte[] fileByteArray = ef.loadFile(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fileByteArray = ef.encode(fileByteArray);;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ef.storeFile(fileByteArray, name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public byte[] loadFile(String name){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        File f = new File(this.getClass().getResource(name + ".class").getPath());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        byte[] fileByteArray = new byte[(int)f.length()];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new FileInputStream(f).read(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fileByteArray;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void storeFile(byte[] fileByteArray, String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String p = this.getClass().getResource("").getPath();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        File file = new File(p + "/" + name + ".xlass");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try (FileOutputStream fop = new FileOutputStream(file)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (!file.exists()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                file.createNewFile();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fop.write(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fop.flush();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (IOException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public byte[] encode (byte[] fileToEncode){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i=0; i&lt; fileToEncode.length; i++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fileToEncode[i] = (byte) (255 - fileToEncode[i]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fileToEncode;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="加载">加载<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%8A%A0%E8%BD%BD" class="hash-link" aria-label="加载的直接链接" title="加载的直接链接">​</a></h2>
<p>接下来我们定义自己的加载器，把刚才的 xlass 文件解密之后加载到 JVM 中，并反射运行它的 <code>hello()</code> 方法。</p>
<p>具体方法是继承 <code>ClassLoader</code> 类，覆盖它的 <code>findClass()</code> 方法，在该方法中使用 <code>defineClass()</code> 将字节流转成 <code>Class</code></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">package ClassLoader;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.File;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.io.FileInputStream;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.lang.reflect.Method;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @author : solidSpoon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @date : 2021/3/5 1:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MyClassLoader extends ClassLoader{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Class&lt;?&gt; clazz = new  MyClassLoader().findClass("Hello");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Object obj = clazz.getConstructor().newInstance();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Method method = clazz.getMethod("hello");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            method.invoke(obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        File f = new File(this.getClass().getResource(name + ".xlass").getPath());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        byte[] fileByteArray = new byte[(int)f.length()];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            new FileInputStream(f).read(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fileByteArray = decode(fileByteArray);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String pack = this.getClass().getPackage().getName();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return defineClass(pack + "." + name, fileByteArray, 0, fileByteArray.length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * 将编码过的字节数组解码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param fileToDecode 要解码的字节数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @return 解码的字节数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public byte[] decode (byte[] fileToDecode){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i=0; i&lt; fileToDecode.length; i++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            fileToDecode[i] = (byte) (255 - fileToDecode[i]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return fileToDecode;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="运行结果">运行结果<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="运行结果的直接链接" title="运行结果的直接链接">​</a></h2>
<p>我们的类加载器解密了 xlass 并将它加载到了 JVM 中</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Hello, classLoader!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="原理">原理<a href="https://solidspoon.xyz/blog/custom-class-loader-loads-encrypted-class-file#%E5%8E%9F%E7%90%86" class="hash-link" aria-label="原理的��直接链接" title="原理的直接链接">​</a></h2>
<p>类加载的原则是双亲委派模型：如果一个类加载器收到了类加载的请求，它首先会把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>
<p>我们定义的这个 <code>findClass()</code> 方法会在下面这个地方调用，如代码所示，如果该类还没有被加载并且父加载器无法加载个类（当然肯定不能加载），就会调用我们定义的 <code>findClass()</code> 去加载这个类</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// java.lang ClassLoader</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        throws ClassNotFoundException</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        synchronized (getClassLoadingLock(name)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // First, check if the class has already been loaded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Class&lt;?&gt; c = findLoadedClass(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (c == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long t0 = System.nanoTime();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    if (parent != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        c = parent.loadClass(name, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        c = findBootstrapClassOrNull(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                } catch (ClassNotFoundException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // ClassNotFoundException thrown if class not found</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // from the non-null parent class loader</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (c == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // If still not found, then invoke findClass in order</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // to find the class.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    long t1 = System.nanoTime();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    c = findClass(name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    // this is the defining class loader; record the stats</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    PerfCounter.getFindClasses().increment();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (resolve) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                resolveClass(c);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return c;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="Java" term="Java"/>
        <category label="JVM" term="JVM"/>
        <category label="类加载器" term="类加载器"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[文章排版指南]]></title>
        <id>https://solidspoon.xyz/blog/article-formatting-guide</id>
        <link href="https://solidspoon.xyz/blog/article-formatting-guide"/>
        <updated>2021-02-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[我们日常看文章的时候，其实已经在慢慢积累我们的审美意识，我们能分辨，哪篇推文看着舒服，哪篇文章看着辣眼睛。为了减少这种「辣眼睛」的情况出现，今天我就来谈谈关于文章排版的事情。]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>我们日常看文章的时候，其实已经在慢慢积累我们的审美意识，我们能分辨，哪篇推文看着舒服，哪篇文章看着辣眼睛。为了减少这种「辣眼睛」的情况出现，今天我就来谈谈关于文章排版的事情。</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="博客排版">▎博客排版<a href="https://solidspoon.xyz/blog/article-formatting-guide#%E5%8D%9A%E5%AE%A2%E6%8E%92%E7%89%88" class="hash-link" aria-label="▎博客排版的直接链接" title="▎博客排版的直接链接">​</a></h3>
<p>写博客的同学都知道，现在博客都是由 Markdown 排版。如果你还不知到 Markdown 的话就去学习一下吧，它可以很方便地帮助我们排版出漂亮的文章。但我们在写博文的时候，仍有一些细节是需要注意的。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-空格">1. 空格<a href="https://solidspoon.xyz/blog/article-formatting-guide#1-%E7%A9%BA%E6%A0%BC" class="hash-link" aria-label="1. 空格的直接链接" title="1. 空格的直接链接">​</a></h4>
<p>每次看到网页上的中文字和英文、数字、符号挤在一起，就会坐立不安，忍不住想在他们之间加个空格。</p>
<ul>
<li>
<p>中英文之间需要加空格</p>
<p><em>eg</em>. 大家可以微信搜一搜 solidSpoon 关注我。</p>
</li>
<li>
<p>中文与数字之间需要加空格</p>
<p><em>eg</em>. 不知不觉，我已经写博客 3 个月了。</p>
</li>
<li>
<p>数字与单位之间需要加空格</p>
<p><em>eg</em>. 我昨天买了一个 16 GB 的 U 盘。</p>
</li>
<li>
<p>完整的英文整句时标点后要加空格。</p>
<p><em>eg</em>. Love me, love my dog.</p>
</li>
</ul>
<p><strong>但是也有一些例外。</strong></p>
<ul>
<li>
<p>度的标志、百分号不加空格</p>
<p><em>eg</em>. 水的沸点是 100°。</p>
<p><em>eg</em>. 我的手机还有 75％ 的电量。</p>
</li>
<li>
<p>全角标点与其他字符之间不加空格</p>
<p><em>eg</em>. 大家好，我是 solidSpoon，欢迎访问我的博客。</p>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-标点">2. 标点<a href="https://solidspoon.xyz/blog/article-formatting-guide#2-%E6%A0%87%E7%82%B9" class="hash-link" aria-label="2. 标点的直接链接" title="2. 标点的直接链接">​</a></h4>
<p>说到标点，不得不说下全角和半角，很多人可能不了解全角和半角的概念，这里顺便介绍下。</p>
<p>全角和半角是英文和中文的编码规范不同遗留下的问题，简单来说，全角占两个字节，半角占一个字节，你可以理解成中文汉子是全角，英文字母是半角，不过半角全角主要是针对标点符号来说的，中文标点占两个字节，英文标点占一个字节。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。</p>
<ul>
<li>
<p>使用全角中文标点</p>
<p>中文排版中所有的标点都应该使用中文全角中文标点</p>
<p><em>eg</em>. 大家好，我是 solidSpoon。</p>
</li>
<li>
<p>遇到英文整句、特殊名词时使用半角标点。</p>
<p><em>eg</em>. 乔布斯说过：「Stay hungry, stay foolish.」</p>
<p><em>eg</em>. Facebook, Inc.</p>
</li>
<li>
<p>使用直角引号</p>
<ul>
<li>
<p>我国国家标准要求弯引号，但是个人建议在新媒体排版时使用直角引号。</p>
<p><em>eg</em>. 「我去吃饭了」，它起身说到。</p>
</li>
<li>
<p>如果引号再使用引号使用直角双引号。</p>
<p><em>eg</em>. 我对他说：「乔布斯说过：『Stay hungry, stay follish.』」</p>
</li>
</ul>
</li>
</ul>
<p><strong>微软拼音输入特殊符号方法：</strong></p>
<p>首先在中文输入界面输入 <code>u</code> 进入「u 模式输入」，然后跟着屏幕提示就可以找到你要输入的特殊符号了。</p>
<ul>
<li><em>eg</em>. 中文界面输入 <code>uubd</code> 就可以找到直角引号。</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-其他">3. 其他<a href="https://solidspoon.xyz/blog/article-formatting-guide#3-%E5%85%B6%E4%BB%96" class="hash-link" aria-label="3. 其他的直接链接" title="3. 其他的直接链接">​</a></h4>
<p>除以上之外，还有一些其他标准推荐大家使用的。</p>
<ul>
<li>
<p>英文名词首字母尽量大写</p>
<p>eg. Google、Android、Facebook</p>
</li>
<li>
<p>专有名词使用正确的大小写</p>
<p>eg. GitHub、iOS、iPhone XS Max、MacBook Pro</p>
</li>
<li>
<p>首行不要缩进</p>
</li>
</ul>
<p>关于首行不缩进可能有人不太同意，但是我要在这里解释下，在说明之前我们必须弄明白「首行缩进」的目的是什么。</p>
<p>「每段之前空两格」是我们从小学写作文就养成的习惯，也是正式文体的格式要求，其目的是为了区分自然段。</p>
<p>但是像我们现在接触的阅读，都是没有固定的格式要求的，如微信公众号、电子文档等，所以大家一般都采用「空出一行」进行自然段与自然段之间的区分，这种写作方式非常省事，而且很整齐。</p>
<p>所以，我认为这种应该是最科学的方式，只要没有明确的格式要求，写作的排版无须首行缩进。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="公众号排版">▎公众号排版<a href="https://solidspoon.xyz/blog/article-formatting-guide#%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%92%E7%89%88" class="hash-link" aria-label="▎公众号排版的直接链接" title="▎公众号排版的直接链接">​</a></h3>
<p>用 Markdown 写作的确很方便。那么对于「不那么方便」的微信公众号，除了上面的那些外，又有什么是需要注意的呢？</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-大小">1. 大小<a href="https://solidspoon.xyz/blog/article-formatting-guide#1-%E5%A4%A7%E5%B0%8F" class="hash-link" aria-label="1. 大小的直接链接" title="1. 大小的直接链接">​</a></h4>
<p>简单来说就是：标题要比正文大，正文要比标注大。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-颜色">2. 颜色<a href="https://solidspoon.xyz/blog/article-formatting-guide#2-%E9%A2%9C%E8%89%B2" class="hash-link" aria-label="2. 颜色的直接链接" title="2. 颜色的直接链接">​</a></h4>
<p>颜色搭配保持统一，个别字体使用特殊色强调，字体颜色尽量不超过三种，颜色不要选取太亮的颜色，例如纯黑，纯红，亮红配亮绿，都是不建议的，看久了眼睛难免会疲惫，不利于阅读。</p>
<p><strong>建议使用字体颜色：</strong></p>
<ul>
<li>标题：使用公众号常用色，或者直接取 logo 或者行业色</li>
<li>正文：选择亮度没这么高的字体，这是纯黑 <code>#000000</code> ，比较偏灰会更加适合阅读 <code>#595757</code> <code>#3f3f3f</code> 等</li>
<li>批注：选择比正文亮度还低，更加浅的浅灰色，例如 <code>#595959</code> <code>#888888</code> <code>#d6d6d6</code></li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-形态">3. 形态<a href="https://solidspoon.xyz/blog/article-formatting-guide#3-%E5%BD%A2%E6%80%81" class="hash-link" aria-label="3. 形态的直接链接" title="3. 形态的直接链接">​</a></h4>
<p>和 word 编辑一样，公众号文字形态也可以做一些基本变化，例如 <strong>加粗</strong>、<em>斜体</em>、<u>下划线</u>、<del>删除线</del> 等，常用的是加粗，以及有趣（戏多）的删除线。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-对齐">4. 对齐<a href="https://solidspoon.xyz/blog/article-formatting-guide#4-%E5%AF%B9%E9%BD%90" class="hash-link" aria-label="4. 对齐的直接链接" title="4. 对齐的直接链接">​</a></h4>
<p>对齐，可以说是拯救强迫症的最佳设置。这里推荐对齐方式为：<strong>两端对齐</strong>。</p>
<p>我们日常排版完会发现，因为句子的字符大小的原因，每行的最右边都会变得层次不齐，强迫症看着会非常的不舒服，这时候如果我们选择两端对齐，就会美观的多。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-小符号">5. 小符号<a href="https://solidspoon.xyz/blog/article-formatting-guide#5-%E5%B0%8F%E7%AC%A6%E5%8F%B7" class="hash-link" aria-label="5. 小符号的直接链接" title="5. 小符号的直接链接">​</a></h4>
<p>就像前面对标题的处理一样，简单的符号也能划分空间，也要常用引号，以此突出重点等</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="6-留白">6. 留白<a href="https://solidspoon.xyz/blog/article-formatting-guide#6-%E7%95%99%E7%99%BD" class="hash-link" aria-label="6. 留白的直接链接" title="6. 留白的直接链接">​</a></h4>
<p>在经过了文字的排版以后，整个版面的风格已经出来了，但是我们会发现，推文里字句的间距太密了，看久了眼睛很不舒服。其实，这都是因为：<u>没有留白，没有呼吸感</u>。</p>
<p>留白可以包括：</p>
<ul>
<li>页面边距</li>
<li>段 / 字 / 行间距</li>
<li>缩进</li>
<li>空行</li>
</ul>
<p><strong>页面边距</strong></p>
<p>页面边距指的是推文与手机屏幕两侧的距离。</p>
<p>默认距离是 0，我们可以设置，让文字离屏幕远一点。我个人建议页边距设置为 0.5，或者 1，比较舒服。</p>
<p><strong>段距</strong></p>
<p>段落与段落之间，图片与文字之间，都可以使用段前距、段后距进行调整距离，当然也可以使用空格代替。</p>
<p><strong>字间距</strong></p>
<p>字体之间的距离太密，容易让人错过重点内容，调整文字间距会有意想不到的效果，呼吸感瞬间有了。和字间距一样，行间距是解放原有行与行之间的重要一步。</p>
<ul>
<li>推荐参数：行间距 1.5 ~ 1.75、字间距 1</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="7-图片与表情包">7. 图片与表情包<a href="https://solidspoon.xyz/blog/article-formatting-guide#7-%E5%9B%BE%E7%89%87%E4%B8%8E%E8%A1%A8%E6%83%85%E5%8C%85" class="hash-link" aria-label="7. 图片与表情包的直接链接" title="7. 图片与表情包的直接链接">​</a></h4>
<p>适当的图片和表情可以增加阅读的兴趣</p>
<p><strong>浮动设置</strong></p>
<p>有的时候，我们会看到很多公众号通篇都是长图，而我们上传多图的时候，要么是图片太大上传不了，要么就是多图的时候出现空隙。这时候我们就只要让图片浮动就可以解决这个问题。</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 是纯函数式数据结构]]></title>
        <id>https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure</id>
        <link href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure"/>
        <updated>2021-02-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[最近一直在学习 Git，但是一直不知道它的原理是什么，直到看到国外的一个大牛的博客。这篇博文给了我很大的启发，所以翻译过来和大家分享。]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>最近一直在学习 Git，但是一直不知道它的原理是什么，直到看到国外的一个大牛的博客。这篇博文给了我很大的启发，所以翻译过来和大家分享。</p>
</blockquote>
<blockquote>
<p><a href="https://blog.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/" target="_blank" rel="noopener noreferrer">原文链接</a></p>
</blockquote>
<p>虽然近几年像 Git 这种分布式版本管理系统很火，但它看起来还是比像 SVN 这样的集中式版本控制系统复杂。我猜这可能是因为我们总是会把二者相比较：在 SVN 中这样做，但在 Git 中却需要那样做。</p>
<p>我认为 Git 的真实含义应该是<strong>一个纯粹的函数式据结构</strong>。所以，如果你在学习熟练地使用 Git，那你也就是在学习处理数据结构。那么我们就先来探讨一下纯函数式数据结构。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="不变性">不变性<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#%E4%B8%8D%E5%8F%98%E6%80%A7" class="hash-link" aria-label="不变性的直接链接" title="不变性的直接链接">​</a></h3>
<p>函数式编程中一个很重要的概念就是不变性( immutablity )。就是说一个对象的状态在构造完成以后不可改变</p>
<p>比如有一个典型列表 <code>[3,2,1]</code>。如果这个列表是可变的，我们可以在他的头部插入一个元素4，即 <code>[4,3,2,1]</code>。现在它变成了一个全新的列表，之前的那个列表丢失了。如果此时其他的小伙伴也在操作这个列表，他们便会不幸地得到一个异常.</p>
<p>而函数式编程便不会发生这种情况。因为当我们在列表头部插入 <code>4</code> 时，它会创建一个新列表 <code>[4,3,2,1]</code>，而不会修改原始列表。所以两个列表会同时存在。</p>
<p>可是如果我们每次迭代这个列表都会生成一个全新的列表，这样不仅浪费，而且效率很低啊。</p>
<p>实际上，函数式数据结构的效率在很大程度上取决于对它们执行的操作。对于刚刚那种（单链接）列表，如果我们只是想在它的头部插入数据，完全可以用更有效率的方法：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  +---+    +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  | 4 +---&gt;+ 3 +---&gt;+ 2 +---&gt;+ 1 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  +---+    +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    |        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">new list  original</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们将新元素 <code>4</code> 放在一个新节点中，并将它指向列表的其余部分。你看，之前的列表得到了复用，之前我们发现的那些问题全都解决了。</p>
<p>可是如果其他人想要在 <code>[3,2,1]</code> 之前插入 <code>9</code> 呢？当然也可以用这个方法啦：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">              +---+      +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">new list 1 -&gt; | 4 +---+-&gt;+ 3 +---&gt;+ 2 +---&gt;+ 1 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              +---+  /   +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    /      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              +---+/    original</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">new list 2 -&gt; | 9 +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              +---+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们当然也可以将这样的元素存储为可变列表（non-immutable list），但是这很危险。假如我们更新列表中的元素 <code>[3]</code>，那部分可是公共的，你的修改会影响到他人，那些需要 <code>[9,3,2,1]</code> 列表的人可不喜欢你这么干。</p>
<p>但是......如果我确实需要将元素 <code>3</code> 变成 <code>5</code>，该怎么办？还是用老方法啊：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">                +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">updated list -&gt; | 4 +---&gt;+ 5 +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                +---+    +---+\    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                               \    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                +---+    +---+  \ +-+-+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  new list 1 -&gt; | 4 +---&gt;+ 3 +---&gt;+ 2 +---&gt;+ 1 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                +---+  / +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      /    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                +---+/  original</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  new list 2 -&gt; | 9 +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                +---+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>你看，它现在可以表示四个列表：</p>
<ul>
<li>最初的的列表 <code>[3,2,1]</code></li>
<li>list 1 <code>[4,3,2,1]</code></li>
<li>list 2 <code>[9,3,2,1]</code></li>
<li>list 2 <code>[4,5,2,1]</code></li>
</ul>
<p>纯函数数据结构在多线程编程中非常有用，因为来自不同线程的更改不会相互干扰。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="和-git-的关系">和 Git 的关系<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#%E5%92%8C-git-%E7%9A%84%E5%85%B3%E7%B3%BB" class="hash-link" aria-label="和 Git 的关系的直接链接" title="和 Git 的关系的直接链接">​</a></h3>
<p>可是，我们之前讨论的不变性和 Git 的版本控制功能有什么关系呢？那我们就一起来对比以下它们俩的异同吧。</p>
<ul>
<li>在版本控制系统中我们想要完成的是：<!-- -->
<ol>
<li>使用新版本的文件更新我们的代码仓管库，旧版本文件也要保留。</li>
<li>当你和你的小伙伴门在同一个个代码库上进行协作时，不会以不可预测的方式相互干扰。</li>
</ol>
</li>
<li>不可变的数据结可以：<!-- -->
<ol>
<li>更新数据结构的同时保留老的数据结构。</li>
<li>在一个线程中对数据结构更改不会影响到其他线程</li>
</ol>
</li>
</ul>
<p>怎么样，是不是觉得它们俩很像。</p>
<p>事实上，我门甚至可以说 Git 基本上就是是一个纯粹的函数式数据结构，让你使用命令行客户端在其上执行操作。</p>
<p>要完成这个类比，我们需要把上面的数字替换成 Commit。</p>
<p>Git commints 是工作历史中特定时间点的全部工作状态的独立副本，即工作目录的完整快照。我们可以把示例中的链表看成是 Git 中的历史记录。</p>
<p>比如说我们有一个代码仓库，它的 <code>master</code> 分支包含三个按顺序的 commit : <code>A</code>，<code>B</code>，<code>C</code>。也就是我们让 Git 在整个开发过程中完整地存储了我们的工作目录三次。</p>
<p>这就是历史纪录啊，用图说话：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+ C +---&gt;+ B +---&gt;+ A |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">master</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="git-commit">Git commit<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#git-commit" class="hash-link" aria-label="Git commit的直接链接" title="Git commit的直接链接">​</a></h3>
<p>当我们执行 commit 的时候，这就可以类比成我们将一个数据提交到了这个历史纪录的开头。而 Git 甚至用 <code>HEAD</code> 代表当前的 commit。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+---+    +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+ D +---&gt;+ C +---&gt;+ B +---&gt;+ A |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---+    +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">master   master^</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>当 Git 执行 commit 时，它会移动当前分支指针，将 <code>master</code> 指向 <code>[D,C,B,A]</code>。我们仍然
可以通过名称 <code>master^</code> 指向 <code>[C,B,A]</code>，并且不会影响到其他人。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="git-amend">Git amend<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#git-amend" class="hash-link" aria-label="Git amend的直接链接" title="Git amend的直接链接">​</a></h3>
<p>如果你使用过 Git，你或许知道可以使用 <code>commit --amend</code> 来更新最近一次的 commit  ，但你真的可以更新 commit 吗？</p>
<p>事实上，你不能。Git 只是创建一个新的 commit （下图中 E）并将 branch 指针指向它。你仍然可以使用 <code>git reflog</code> 命令看到它，并且可以通过它的 hash value 来引用（假设他的 hash value 是 ef4d34）。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          +---+    +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ef4d34 -&gt; | D +--+&gt;+ C +---&gt;+ B +---&gt;+ A |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+ /  +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               /     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+    master^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">master -&gt; | E |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="git-branch">Git branch<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#git-branch" class="hash-link" aria-label="Git branch的直接链接" title="Git branch的直接链接">​</a></h3>
<p>如你所见，每次执行 <code>commit --amend</code> 时，实际上都会创建一个新分支。分支的唯一功能就是给我们能引用的 commit 起个名字。我们甚至可以使用 <code>git checkout -b branch ef3d34</code> 命令在那个被丢弃的 commit <code>ef3d34</code> 上创建一个新分支。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          +---+    +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">branch -&gt; | D +--+&gt;+ C +---&gt;+ B +---&gt;+ A |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+ /  +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               /     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+  master^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">master -&gt; | E |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通常，我们通过为当前的工作流 <code>HEAD</code> 创建一个新名称来在 Git 中进行分支，但是如果你将 Git 理解为一个函数式数据结构，你就可以随心所欲地在这个树状图上的任何一个 commit 上创建分支了。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="git-rebase">Git rebase<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#git-rebase" class="hash-link" aria-label="Git rebase的直接链接" title="Git rebase的直接链接">​</a></h3>
<p>当我们在上边的示例列表中更新一个节点时,我们必须把列表中的每个节点添加到在更新后的元素之前（在我们的示例中，这是单个节点 <code>4</code>，但可以是任意数量的节点）。在 Git 中，这称为重新提交（replaying commits），执行此操作的命令称为变基（rebase）。要更新旧提交，我们添加 <code>-i</code> 参数来执行一个在 Git 中称被叫做「交互式 rebase」的操作。</p>
<p>比如说，我们想要用一个新的 commit message 来更新 commit <code>C</code>。我们需要切换到 commit <code>D</code>，然后输入 <code>git rebase -i c</code> 。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&gt; git checkout D</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; git rebase -i C</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在窗口中包含一下内容：</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pick cd3ff32 &lt;C's commit message&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pick a65a671 &lt;D's commit message&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># some helpful comments from git</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如果我们想编辑 cimmit <code>C</code>，Git 允许我们在重放后续提交之前编辑该提交。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">edit cd3ff32 &lt;C's commit message&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pick a65a671 &lt;D's commit message&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>当我们保存文件并关闭它时，Git 会开始一个 rebase 。它会在 commit <code>C</code> 停止，这样我们可以修改它。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Stopped at cd3ff32... &lt;C's commit message&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You can amend the commit now, with</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        git commit --amend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Once you are satisfied with your changes, run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        git rebase --continue</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>窗口中的消息说明了一切。我们可以根据需要随意编辑 commit 后我们调用 <code>commit --amend</code> 创建更新的 commit，然后使用「继续 rebase」指令： <code>git rebase --continue</code>。
当我们选择命令时，其余的 commit 将一个接一个地重放 <code>pick</code>（除非最终发生了合并冲突，在这种情况下 Git 会停止并在你修复它之后才能继续）。我们的完整存储库现在就像下边这样。</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rebased -&gt;| D'+---&gt;+ C'+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+    +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">branch -&gt; | D +--+&gt;+ C +---&gt;+ B +---&gt;+ A |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+ /  +---+    +---+    +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               /     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+  master^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">master -&gt; | E |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +---+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我希望上面的图会让你觉得熟悉。希望你也能明白为什么 Git 的 rebase 命令会创建所有新的 commit。Git 是一个函数式数据结构，它不允许更改现有的 commit。</p>
<p>由于 rebase 引入了一个新的提交链，所以我们一定希望能够对这个新链的外观进行必要的且任意的控制。我们可以用 <code>rebase -i</code> 来重新排序，压缩或删除提交，或者随意拉入新的提交，比如把一个 commit 分成几部分，或者从存储仓库中的其他位置开始（使用 <code>--onto</code> 参数）。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="git-merge">Git merge<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#git-merge" class="hash-link" aria-label="Git merge的直接链接" title="Git merge的直接链接">​</a></h3>
<p>现在我们来谈谈合并把。Git 允许我们将两个分支合并为一个</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --+ X |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---+/  +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| M |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---+   +---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      --+ Y |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        +---+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>合并給我们的模型带来了更多的复杂性。它把我们的历史从一个树状图变成了一个非循环图。这并没有太大的改变，但请注意，虽然 rebase 听起来复杂，但只有 merge 命令带来了额外的概念复杂性。</p>
<p>可以通过在新方向上应用新提交来理解 Rebase 。合并是一种根本不同的操作。一个数据结构，一个你可以将两个部分像这样组合成数据结构一个特殊的名称：我们称它 confluently persistent。（函数式数据结构也叫 persistent。我避免使用
这个术语，所以你不要将它与像物理光盘这样的持久性媒体上的存储概念混淆。）</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="结论">结论<a href="https://solidspoon.xyz/blog/git-is-a-purely-functional-data-structure#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="结论的直接链接" title="结论的直接链接">​</a></h3>
<p>Git可以看成是一个相当简单的函数式数据结构。与其把Git描述成一个版本控制系统，不如说版本控制是“不变性”数据结构的一个自然属性。。我认为以这种方式谈论 Git 能更准确地传达 Git 的简单性和威力，而不是与集中式版本控制系统相比能完成什么。</p>
<p>如果以这种方式来思考的话，Git 在概念上比 SVN, CVS 等要简单。 大家认为 Git 更加复杂可能是因为这种复杂性能支持更有趣的 workflow。</p>
<p>如果你曾经觉得 Git 令人生畏，那请记住它的简单结构，以及在函数式结构中，
插入其中的任何东西都不会真正丢失，并且可以被恢复。（检查你的 <code>reflog</code>）</p>]]></content>
        <author>
            <name>solidSpoon</name>
            <uri>https://github.com/solidSpoon</uri>
        </author>
        <category label="翻译" term="翻译"/>
        <category label="Git" term="Git"/>
    </entry>
</feed>